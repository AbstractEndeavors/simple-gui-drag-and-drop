{"Listbox": {"name": "Listbox", "components": {"values": "None", "default_values": "None", "select_mode": "None", "change_submits": "False", "enable_events": "False", "bind_return_key": "False", "size": "(None, None)", "s": "(None, None)", "disabled": "False", "justification": "None", "auto_size_text": "None", "font": "None", "no_scrollbar": "False", "horizontal_scroll": "False", "background_color": "None", "text_color": "None", "highlight_background_color": "None", "highlight_text_color": "None", "sbar_trough_color": "None", "sbar_background_color": "None", "sbar_arrow_color": "None", "sbar_width": "None", "sbar_arrow_width": "None", "sbar_frame_color": "None", "sbar_relief": "None", "key": "None", "k": "None", "pad": "None", "p": "None", "tooltip": "None", "expand_x": "False", "expand_y": "False", "right_click_menu": "None", "visible": "True", "metadata": "None)"}, "descriptions": {"values": {"Type": "List[Any] or Tuple[Any]", "Meaning": "list of values to display. Can be any type including mixed types as long as they have <strong>str</strong> method"}, "default_values": {"Type": "List[Any]", "Meaning": "which values should be initially selected"}, "select_mode": {"Type": "[enum]", "Meaning": "Select modes are used to determine if only 1 item can be selected or multiple and how they can be selected. Valid choices begin with 'LISTBOX_SELECT_MODE_' and include: LISTBOX_SELECT_MODE_SINGLE LISTBOX_SELECT_MODE_MULTIPLE LISTBOX_SELECT_MODE_BROWSE LISTBOX_SELECT_MODE_EXTENDED"}, "change_submits": {"Type": "bool", "Meaning": "DO NOT USE. Only listed for backwards compat - Use enable_events instead"}, "enable_events": {"Type": "bool", "Meaning": "Turns on the element specific events. Listbox generates events when an item is clicked"}, "bind_return_key": {"Type": "bool", "Meaning": "If True, then the return key will cause a the Listbox to generate an event when return key is pressed"}, "size": {"Type": "(int, int) or  (int, None) or int", "Meaning": "w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1"}, "s": {"Type": "(int, int)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "disabled": {"Type": "bool", "Meaning": "set disable state for element"}, "justification": {"Type": "str", "Meaning": "justification for items in listbox. Valid choices - left, right, center. Default is left. NOTE - on some older versions of tkinter, not available"}, "auto_size_text": {"Type": "bool", "Meaning": "True if element should be the same size as the contents"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "no_scrollbar": {"Type": "bool", "Meaning": "Controls if a scrollbar should be shown. If True, no scrollbar will be shown"}, "horizontal_scroll": {"Type": "bool", "Meaning": "Controls if a horizontal scrollbar should be shown. If True a horizontal scrollbar will be shown in addition to vertical"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "highlight_background_color": {"Type": "str", "Meaning": "color of the background when an item is selected. Defaults to normal text color (a reverse look)"}, "highlight_text_color": {"Type": "str", "Meaning": "color of the text when an item is selected. Defaults to the normal background color (a rerverse look)"}, "sbar_trough_color": {"Type": "str", "Meaning": "Scrollbar color of the trough"}, "sbar_background_color": {"Type": "str", "Meaning": "Scrollbar color of the background of the arrow buttons at the ends AND the color of the 'thumb' (the thing you grab and slide). Switches to arrow color when mouse is over"}, "sbar_arrow_color": {"Type": "str", "Meaning": "Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over"}, "sbar_width": {"Type": "int", "Meaning": "Scrollbar width in pixels"}, "sbar_arrow_width": {"Type": "int", "Meaning": "Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar"}, "sbar_frame_color": {"Type": "str", "Meaning": "Scrollbar Color of frame around scrollbar (available only on some ttk themes)"}, "sbar_relief": {"Type": "str", "Meaning": "Scrollbar relief that will be used for the 'thumb' of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with 'RELIEF_' - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "CalendarButton": {"name": "CalendarButton", "components": {"button_text": "None", "target": "(555666777, -1)", "close_when_date_chosen": "True", "default_date_m_d_y": "(None, None, None)", "image_filename": "None", "image_data": "None", "image_size": "(None, None)", "image_subsample": "None", "tooltip": "None", "border_width": "None", "size": "(None, None)", "s": "(None, None)", "auto_size_button": "None", "button_color": "None", "disabled": "False", "font": "None", "bind_return_key": "False", "focus": "False", "pad": "None", "p": "None", "key": "None", "k": "None", "locale": "None", "format": "\"%Y-%m-%d %H:%M:%S\"", "begin_at_sunday_plus": "0", "month_names": "None", "day_abbreviations": "None", "title": "\"Choose Date\"", "no_titlebar": "True", "location": "(None, None)", "visible": "True", "metadata": "None", "expand_x": "False", "expand_y": "False)", "<strong>RETURN</strong>": "None", "default_color": "None", "file_types": "None", "initial_folder": "None", "change_submits": "None", "enable_events": "None", "default_extension": "None", "files_delimiter": "None"}, "descriptions": {"button_text": {"Type": "str", "Meaning": "text in the button (Default value = Yes)"}, "target": {"Type": "str or (int, int)", "Meaning": "key or (row,col) target for the button (Default value = (ThisRow, -1))"}, "close_when_date_chosen": {"Type": "bool", "Meaning": "(Default = True)"}, "default_date_m_d_y": {"Type": "(int, int or None, int)", "Meaning": "Beginning date to show"}, "image_filename": {"Type": "image filename if there is a button image", "Meaning": "image filename if there is a button image"}, "image_data": {"Type": "in-RAM image to be displayed on button", "Meaning": "in-RAM image to be displayed on button"}, "image_size": {"Type": "(Default = (None))", "Meaning": "image size (O.K.)"}, "image_subsample": {"Type": "amount to reduce the size of the image", "Meaning": "amount to reduce the size of the image"}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "border_width": {"Type": "int", "Meaning": "width of border around element"}, "size": {"Type": "(int, int)", "Meaning": "(w,h) w=characters-wide, h=rows-high"}, "s": {"Type": "(int, int)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "auto_size_button": {"Type": "bool", "Meaning": "True if button size is determined by button text"}, "button_color": {"Type": "(str, str) or str", "Meaning": "button color (foreground, background)"}, "disabled": {"Type": "bool", "Meaning": "set disable state for element (Default = False)"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "bind_return_key": {"Type": "bool", "Meaning": "(Default = True) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options"}, "focus": {"Type": "", "Meaning": "if focus should be set to this"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "key": {"Type": "str or int or tuple or object", "Meaning": "key for uniquely identify this element (for window.find_element)"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "locale": {"Type": "str", "Meaning": "defines the locale used to get day names"}, "format": {"Type": "str", "Meaning": "formats result using this strftime format"}, "begin_at_sunday_plus": {"Type": "int", "Meaning": "Determines the left-most day in the display. 0=sunday, 1=monday, etc"}, "month_names": {"Type": "List[str]", "Meaning": "optional list of month names to use (should be 12 items)"}, "day_abbreviations": {"Type": "List[str]", "Meaning": "optional list of abbreviations to display as the day of week"}, "title": {"Type": "str", "Meaning": "Title shown on the date chooser window"}, "no_titlebar": {"Type": "bool", "Meaning": "if True no titlebar will be shown on the date chooser window"}, "location": {"Type": "(int, int)", "Meaning": "Location on the screen (x,y) to show the calendar popup window"}, "visible": {"Type": "bool", "Meaning": "set initial visibility state of the Button"}, "metadata": {"Type": "Any", "Meaning": "Anything you want to store along with this button"}, "expand_x": {"Type": "bool", "Meaning": "If True Element will expand in the Horizontal directions"}, "expand_y": {"Type": "bool", "Meaning": "If True Element will expand in the Vertical directions"}, "<strong>RETURN</strong>": {"Type": "(Button)", "Meaning": "returns a button"}, "default_color": {"Type": "str", "Meaning": "Color to be sent to tkinter to use as the default color"}, "file_types": {"Type": "Tuple[(str, str), ...]", "Meaning": "Default value = (('ALL Files', '<em>.</em> *'),)."}, "initial_folder": {"Type": "str", "Meaning": "starting path for folders and files"}, "change_submits": {"Type": "bool", "Meaning": "If True, pressing Enter key submits window (Default = False)"}, "enable_events": {"Type": "bool", "Meaning": "Turns on the element specific events.(Default = False)"}, "default_extension": {"Type": "str", "Meaning": "If no extension entered by user, add this to filename (only used in saveas dialogs)"}, "files_delimiter": {"Type": "str", "Meaning": "String to place between files when multiple files are selected. Normally a ;"}}}, "Pane": {"name": "Pane", "components": {"pane_list": "None", "background_color": "None", "size": "(None, None)", "s": "(None, None)", "pad": "None", "p": "None", "orientation": "\"vertical\"", "show_handle": "True", "relief": "\"raised\"", "handle_size": "None", "border_width": "None", "key": "None", "k": "None", "expand_x": "None", "expand_y": "None", "visible": "True", "metadata": "None)"}, "descriptions": {"pane_list": {"Type": "List[Column] or Tuple[Column]", "Meaning": "Must be a list of Column Elements. Each Column supplied becomes one pane thats shown"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "size": {"Type": "(int, int)", "Meaning": "(width, height) w=characters-wide, h=rows-high How much room to reserve for the Pane"}, "s": {"Type": "(int, int)  or (None, None)", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "orientation": {"Type": "str", "Meaning": "horizontal or vertical or (h or v). Direction the Pane should slide"}, "show_handle": {"Type": "bool", "Meaning": "if True, the handle is drawn that makes it easier to grab and slide"}, "relief": {"Type": "enum", "Meaning": "relief style. Values are same as other elements that use relief values. RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID"}, "handle_size": {"Type": "int", "Meaning": "Size of the handle in pixels"}, "border_width": {"Type": "int", "Meaning": "width of border around element in pixels"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "expand_x": {"Type": "bool", "Meaning": "If True the column will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the column will automatically expand in the Y direction to fill available space"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "show_debugger_popout_window": {"name": "show_debugger_popout_window", "components": {"location": "(None, None), args=*&lt;1 or N object&gt;)", "<strong>RETURN</strong>": "None"}, "descriptions": {"location": {"Type": "(int, int)", "Meaning": "Locations (x,y) on the screen to place upper left corner of the window"}, "<strong>RETURN</strong>": {"Type": "None", "Meaning": "None"}}}, "Text": {"name": "Text", "components": {"text": "\"\"", "size": "(None, None)", "s": "(None, None)", "auto_size_text": "None", "click_submits": "False", "enable_events": "False", "relief": "None", "font": "None", "text_color": "None", "background_color": "None", "border_width": "None", "justification": "None", "pad": "None", "p": "None", "key": "None", "k": "None", "right_click_menu": "None", "expand_x": "False", "expand_y": "False", "grab": "None", "tooltip": "None", "visible": "True", "metadata": "None)"}, "descriptions": {"text": {"Type": "Any", "Meaning": "The text to display. Can include /n to achieve multiple lines. Will convert (optional) parameter into a string"}, "size": {"Type": "(int, int) or  (int, None) or (None, None) or (int, ) or int", "Meaning": "(w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1"}, "s": {"Type": "(int, int) or  (int, None) or (None, None) or (int, ) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "auto_size_text": {"Type": "bool", "Meaning": "if True size of the Text Element will be sized to fit the string provided in text parm"}, "click_submits": {"Type": "bool", "Meaning": "DO NOT USE. Only listed for backwards compat - Use enable_events instead"}, "enable_events": {"Type": "bool", "Meaning": "Turns on the element specific events. Text events happen when the text is clicked"}, "relief": {"Type": "str", "Meaning": "relief style around the text. Values are same as progress meter relief values. Should be a constant that is defined at starting with RELIEF - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "border_width": {"Type": "int", "Meaning": "number of pixels for the border (if using a relief)"}, "justification": {"Type": "str", "Meaning": "how string should be aligned within space provided by size. Valid choices = <code>left</code>, <code>right</code>, <code>center</code>"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "grab": {"Type": "bool", "Meaning": "If True can grab this element and move the window around. Default is False"}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "Output Element - a multi-lined text area to where stdout, stderr, cprint are rerouted.": {"name": "Output Element - a multi-lined text area to where stdout, stderr, cprint are rerouted.", "components": {"size": "None", "s": "None", "background_color": "None", "text_color": "None", "pad": "None", "p": "None", "autoscroll_only_at_bottom": "None", "echo_stdout_stderr": "None", "font": "None", "tooltip": "None", "key": "None", "k": "None", "right_click_menu": "None", "expand_x": "None", "expand_y": "None", "visible": "None", "metadata": "None", "wrap_lines": "None", "horizontal_scroll": "None", "sbar_trough_color": "None", "sbar_background_color": "None", "sbar_arrow_color": "None", "sbar_width": "None", "sbar_arrow_width": "None", "sbar_frame_color": "None", "sbar_relief": "None"}, "descriptions": {"size": {"Type": "(int, int)  or (None, None) or int", "Meaning": "(w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1"}, "s": {"Type": "(int, int)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "autoscroll_only_at_bottom": {"Type": "bool", "Meaning": "If True the contents of the element will automatically scroll only if the scrollbar is at the bottom of the multiline"}, "echo_stdout_stderr": {"Type": "bool", "Meaning": "If True then output to stdout will be output to this element AND also to the normal console location"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}, "wrap_lines": {"Type": "bool", "Meaning": "If True, the lines will be wrapped automatically. Other parms affect this setting, but this one will override them all. Default is it does nothing and uses previous settings for wrapping."}, "horizontal_scroll": {"Type": "bool", "Meaning": "Controls if a horizontal scrollbar should be shown. If True, then line wrapping will be off by default"}, "sbar_trough_color": {"Type": "str", "Meaning": "Scrollbar color of the trough"}, "sbar_background_color": {"Type": "str", "Meaning": "Scrollbar color of the background of the arrow buttons at the ends AND the color of the 'thumb' (the thing you grab and slide). Switches to arrow color when mouse is over"}, "sbar_arrow_color": {"Type": "str", "Meaning": "Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over"}, "sbar_width": {"Type": "int", "Meaning": "Scrollbar width in pixels"}, "sbar_arrow_width": {"Type": "int", "Meaning": "Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar"}, "sbar_frame_color": {"Type": "str", "Meaning": "Scrollbar Color of frame around scrollbar (available only on some ttk themes)"}, "sbar_relief": {"Type": "str", "Meaning": "Scrollbar relief that will be used for the 'thumb' of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with 'RELIEF_' - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID"}}}, "Column": {"name": "Column", "components": {"layout": "None", "background_color": "None", "size": "(None, None)", "s": "(None, None)", "size_subsample_width": "1", "size_subsample_height": "2", "pad": "None", "p": "None", "scrollable": "False", "vertical_scroll_only": "False", "right_click_menu": "None", "key": "None", "k": "None", "visible": "True", "justification": "None", "element_justification": "None", "vertical_alignment": "None", "grab": "None", "expand_x": "None", "expand_y": "None", "metadata": "None", "sbar_trough_color": "None", "sbar_background_color": "None", "sbar_arrow_color": "None", "sbar_width": "None", "sbar_arrow_width": "None", "sbar_frame_color": "None", "sbar_relief": "None)"}, "descriptions": {"layout": {"Type": "List[List[Element]]", "Meaning": "Layout that will be shown in the Column container"}, "background_color": {"Type": "str", "Meaning": "color of background of entire Column"}, "size": {"Type": "(int or None, int or None)", "Meaning": "(width, height) size in pixels (doesnt work quite right, sometimes only 1 dimension is set by tkinter. Use a Sizer Element to help set sizes"}, "s": {"Type": "(int or None, int or None)", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "size_subsample_width": {"Type": "float", "Meaning": "Determines the size of a scrollable column width based on 1/size_subsample * required size. 1 = match the contents exactly, 2 = 1/2 contents size, 3 = 1/3. Can be a fraction to make larger than required."}, "size_subsample_height": {"Type": "float", "Meaning": "Determines the size of a scrollable height based on 1/size_subsample * required size. 1 = match the contents exactly, 2 = 1/2 contents size, 3 = 1/3. Can be a fraction to make larger than required.."}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "scrollable": {"Type": "bool", "Meaning": "if True then scrollbars will be added to the column. If you update the contents of a scrollable column, be sure and call Column.contents_changed also"}, "vertical_scroll_only": {"Type": "bool", "Meaning": "if True then no horizontal scrollbar will be shown if a scrollable column"}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "key": {"Type": "str or int or tuple or object", "Meaning": "Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "justification": {"Type": "str", "Meaning": "set justification for the Column itself. Note entire row containing the Column will be affected"}, "element_justification": {"Type": "str", "Meaning": "All elements inside the Column will have this justification left, right, center are valid values"}, "vertical_alignment": {"Type": "str", "Meaning": "Place the column at the top, center, bottom of the row (can also use t,c,r). Defaults to no setting (tkinter decides)"}, "grab": {"Type": "bool", "Meaning": "If True can grab this element and move the window around. Default is False"}, "expand_x": {"Type": "bool", "Meaning": "If True the column will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the column will automatically expand in the Y direction to fill available space"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}, "sbar_trough_color": {"Type": "str", "Meaning": "Scrollbar color of the trough"}, "sbar_background_color": {"Type": "str", "Meaning": "Scrollbar color of the background of the arrow buttons at the ends AND the color of the 'thumb' (the thing you grab and slide). Switches to arrow color when mouse is over"}, "sbar_arrow_color": {"Type": "str", "Meaning": "Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over"}, "sbar_width": {"Type": "int", "Meaning": "Scrollbar width in pixels"}, "sbar_arrow_width": {"Type": "int", "Meaning": "Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar"}, "sbar_frame_color": {"Type": "str", "Meaning": "Scrollbar Color of frame around scrollbar (available only on some ttk themes)"}, "sbar_relief": {"Type": "str", "Meaning": "Scrollbar relief that will be used for the 'thumb' of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with 'RELIEF_' - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID"}}}, "UserSettings": {"name": "UserSettings", "components": {"filename": "None", "path": "None", "silent_on_error": "False", "autosave": "True", "use_config_file": "None", "convert_bools_and_none": "True)"}, "descriptions": {"filename": {"Type": "(str or None)", "Meaning": "The name of the file to use. Can be a full path and filename or just filename"}, "path": {"Type": "(str or None)", "Meaning": "The folder that the settings file will be stored in. Do not include the filename."}, "silent_on_error": {"Type": "bool", "Meaning": "If True errors will not be reported"}, "autosave": {"Type": "bool", "Meaning": "If True the settings file is saved after every update"}, "use_config_file": {"Type": "bool", "Meaning": "If True then the file format will be a config.ini rather than json"}, "convert_bools_and_none": {"Type": "bool", "Meaning": "If True then 'True', 'False', 'None' will be converted to the Python values True, False, None when using INI files. Default is TRUE"}}}, "VPush": {"name": "VPush", "components": {"background_color": "None)"}, "descriptions": {"background_color": {"Type": "str", "Meaning": "color of background may be needed because of how this is implemented"}}}, "read_all_windows": {"name": "read_all_windows", "components": {"timeout": "None, timeout_key = \"__TIMEOUT__\")", "timeout_key": "None", "<strong>RETURN</strong>": "None"}, "descriptions": {"timeout": {"Type": "int", "Meaning": "Time in milliseconds to delay before a returning a timeout event"}, "timeout_key": {"Type": "Any", "Meaning": "Key to return when a timeout happens. Defaults to the standard TIMEOUT_KEY"}, "<strong>RETURN</strong>": {"Type": "(Window, Any, Dict or List)", "Meaning": "A tuple with the  (Window, event, values dictionary/list)"}}}, "clipboard_set": {"name": "clipboard_set", "components": {"<strong>RETURN</strong>": "None", "new_value": "None"}, "descriptions": {"<strong>RETURN</strong>": {"Type": "(str)", "Meaning": "The current value of the clipboard"}, "new_value": {"Type": "(str or bytes)", "Meaning": "value to set the clipboard to. Will be converted to a string"}}}, "main_get_debug_data": {"name": "main_get_debug_data", "components": {"suppress_popup": "False)", "<strong>RETURN</strong>": "None"}, "descriptions": {"suppress_popup": {"Type": "bool", "Meaning": "If True no popup window will be shown. The string will be only returned, not displayed"}, "<strong>RETURN</strong>": {"Type": "(bool)", "Meaning": "True if settings were changed"}}}, "Combo": {"name": "Combo", "components": {"values": "None", "default_value": "None", "size": "(None, None)", "s": "(None, None)", "auto_size_text": "None", "background_color": "None", "text_color": "None", "button_background_color": "None", "button_arrow_color": "None", "bind_return_key": "False", "change_submits": "False", "enable_events": "False", "enable_per_char_events": "None", "disabled": "False", "key": "None", "k": "None", "pad": "None", "p": "None", "expand_x": "False", "expand_y": "False", "tooltip": "None", "readonly": "False", "font": "None", "visible": "True", "metadata": "None)"}, "descriptions": {"values": {"Type": "List[Any] or Tuple[Any]", "Meaning": "values to choose. While displayed as text, the items returned are what the caller supplied, not text"}, "default_value": {"Type": "Any", "Meaning": "Choice to be displayed as initial value. Must match one of values variable contents"}, "size": {"Type": "(int, int)  or (None, None) or int", "Meaning": "width, height. Width = characters-wide, height = NOTE its the number of entries to show in the list. If an Int is passed rather than a tuple, then height is auto-set to 1 and width is value of the int"}, "s": {"Type": "(int, int)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "auto_size_text": {"Type": "bool", "Meaning": "True if element should be the same size as the contents"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "button_background_color": {"Type": "str", "Meaning": "The color of the background of the button on the combo box"}, "button_arrow_color": {"Type": "str", "Meaning": "The color of the arrow on the button on the combo box"}, "bind_return_key": {"Type": "bool", "Meaning": "If True, then the return key will cause a the Combo to generate an event when return key is pressed"}, "change_submits": {"Type": "bool", "Meaning": "DEPRICATED DO NOT USE. Use <code>enable_events</code> instead"}, "enable_events": {"Type": "bool", "Meaning": "Turns on the element specific events. Combo event is when a choice is made"}, "enable_per_char_events": {"Type": "bool", "Meaning": "Enables generation of events for every character thats input. This is like the Input elements events"}, "disabled": {"Type": "bool", "Meaning": "set disable state for element"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "tooltip": {"Type": "str", "Meaning": "text that will appear when mouse hovers over this element"}, "readonly": {"Type": "bool", "Meaning": "make element readonly (user cant change). True means user cannot change"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "ChangeLookAndFeel": {"name": "ChangeLookAndFeel", "components": {"index": "None", "force": "None", "<strong>RETURN</strong>": "None", "columns": "None", "scrollable": "None", "scroll_area_size": "None", "search_string": "None", "location": "None"}, "descriptions": {"index": {"Type": "str", "Meaning": "the name of the index into the Look and Feel table (does not have to be exact, can be 'fuzzy')"}, "force": {"Type": "bool", "Meaning": "no longer used"}, "<strong>RETURN</strong>": {"Type": "None", "Meaning": "None"}, "columns": {"Type": "int", "Meaning": "The number of themes to display per row"}, "scrollable": {"Type": "bool", "Meaning": "If True then scrollbars will be added"}, "scroll_area_size": {"Type": "(int, int)", "Meaning": "Size of the scrollable area (The Column Element used to make scrollable)"}, "search_string": {"Type": "str", "Meaning": "If specified then only themes containing this string will be shown"}, "location": {"Type": "(int, int)", "Meaning": "Location on the screen to place the window. Defaults to the center like all windows"}}}, "pin": {"name": "pin", "components": {"elem": "None", "vertical_alignment": "None", "shrink": "True", "expand_x": "None", "expand_y": "None)", "<strong>RETURN</strong>": "None", "elem_or_row": "None", "background_color": "None"}, "descriptions": {"elem": {"Type": "Element", "Meaning": "the element to put into the layout"}, "vertical_alignment": {"Type": "str or None", "Meaning": "Aligns elements vertically. top, center, bottom. Can be shortened to t, c, b"}, "shrink": {"Type": "bool", "Meaning": "If True, then the space will shrink down to a single pixel when hidden. False leaves the area large and blank"}, "expand_x": {"Type": "bool", "Meaning": "If True/False the value will be passed to the Column Elements used to make this feature"}, "expand_y": {"Type": "bool", "Meaning": "If True/False the value will be passed to the Column Elements used to make this feature"}, "<strong>RETURN</strong>": {"Type": "Column or List[Column]", "Meaning": "A column element containing the provided element aligned to the top or list of elements (a row)"}, "elem_or_row": {"Type": "Element or List[Element] or Tuple[Element]", "Meaning": "the element or row of elements"}, "background_color": {"Type": "str or None", "Meaning": "Background color for container that is used by vtop to do the alignment"}}}, "Canvas": {"name": "Canvas", "components": {"canvas": "None", "background_color": "None", "size": "(None, None)", "s": "(None, None)", "pad": "None", "p": "None", "key": "None", "k": "None", "tooltip": "None", "right_click_menu": "None", "expand_x": "False", "expand_y": "False", "visible": "True", "border_width": "0", "metadata": "None)"}, "descriptions": {"canvas": {"Type": "(tk.Canvas)", "Meaning": "Your own tk.Canvas if you already created it. Leave blank to create a Canvas"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "size": {"Type": "(int,int) or (None, None)", "Meaning": "(width in char, height in rows) size in pixels to make canvas"}, "s": {"Type": "(int, int)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "border_width": {"Type": "int", "Meaning": "width of border around element in pixels. Not normally used with Canvas element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "ButtonMenu": {"name": "ButtonMenu", "components": {"button_text": "None", "menu_def": "None", "tooltip": "None", "disabled": "False", "image_source": "None", "image_filename": "None", "image_data": "None", "image_size": "(None, None)", "image_subsample": "None", "image_zoom": "None", "border_width": "None", "size": "(None, None)", "s": "(None, None)", "auto_size_button": "None", "button_color": "None", "background_color": "None", "text_color": "None", "disabled_text_color": "None", "font": "None", "item_font": "None", "pad": "None", "p": "None", "expand_x": "False", "expand_y": "False", "key": "None", "k": "None", "tearoff": "False", "visible": "True", "metadata": "None)"}, "descriptions": {"button_text": {"Type": "str", "Meaning": "Text to be displayed on the button"}, "menu_def": {"Type": "List[List[str]]", "Meaning": "A list of lists of Menu items to show when this element is clicked. See docs for format as they are the same for all menu types"}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "disabled": {"Type": "bool", "Meaning": "If True button will be created disabled"}, "image_source": {"Type": "(str or bytes)", "Meaning": "Image to place on button. Use INSTEAD of the image_filename and image_data. Unifies these into 1 easier to use parm"}, "image_filename": {"Type": "str", "Meaning": "image filename if there is a button image. GIFs and PNGs only."}, "image_data": {"Type": "bytes or str", "Meaning": "Raw or Base64 representation of the image to put on button. Choose either filename or data"}, "image_size": {"Type": "(int, int)", "Meaning": "Size of the image in pixels (width, height)"}, "image_subsample": {"Type": "int", "Meaning": "amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc"}, "image_zoom": {"Type": "int", "Meaning": "amount to increase the size of the image. 2=twice size, 3=3 times, etc"}, "border_width": {"Type": "int", "Meaning": "width of border around button in pixels"}, "size": {"Type": "(int, int)  or (None, None) or int", "Meaning": "(w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1"}, "s": {"Type": "(int, int)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "auto_size_button": {"Type": "bool", "Meaning": "if True the button size is sized to fit the text"}, "button_color": {"Type": "(str, str) or str", "Meaning": "of button. Easy to remember which is which if you say 'ON' between colors. 'red' on 'green'"}, "background_color": {"Type": "str", "Meaning": "color of the background"}, "text_color": {"Type": "str", "Meaning": "elements text color. Can be in #RRGGBB format or a color name 'black'"}, "disabled_text_color": {"Type": "str", "Meaning": "color to use for text when item is disabled. Can be in #RRGGBB format or a color name 'black'"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "item_font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike, for the menu items"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "tearoff": {"Type": "bool", "Meaning": "Determines if menus should allow them to be torn off"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "set_options": {"name": "set_options", "components": {"icon": "None", "button_color": "None", "element_size": "(None, None)", "button_element_size": "(None, None)", "margins": "(None, None)", "element_padding": "(None, None)", "auto_size_text": "None", "auto_size_buttons": "None", "font": "None", "border_width": "None", "slider_border_width": "None", "slider_relief": "None", "slider_orientation": "None", "autoclose_time": "None", "message_box_line_width": "None", "progress_meter_border_depth": "None", "progress_meter_style": "None", "progress_meter_relief": "None", "progress_meter_color": "None", "progress_meter_size": "None", "text_justification": "None", "background_color": "None", "element_background_color": "None", "text_element_background_color": "None", "input_elements_background_color": "None", "input_text_color": "None", "scrollbar_color": "None", "text_color": "None", "element_text_color": "None", "debug_win_size": "(None, None)", "window_location": "(None, None)", "error_button_color": "(None, None)", "tooltip_time": "None", "tooltip_font": "None", "use_ttk_buttons": "None", "ttk_theme": "None", "suppress_error_popups": "None", "suppress_raise_key_errors": "None", "suppress_key_guessing": "None", "warn_button_key_duplicates": "False", "enable_treeview_869_patch": "None", "enable_mac_notitlebar_patch": "None", "use_custom_titlebar": "None", "titlebar_background_color": "None", "titlebar_text_color": "None", "titlebar_font": "None", "titlebar_icon": "None", "user_settings_path": "None", "pysimplegui_settings_path": "None", "pysimplegui_settings_filename": "None", "keep_on_top": "None", "dpi_awareness": "None", "scaling": "None", "disable_modal_windows": "None", "force_modal_windows": "None", "tooltip_offset": "(None, None)", "sbar_trough_color": "None", "sbar_background_color": "None", "sbar_arrow_color": "None", "sbar_width": "None", "sbar_arrow_width": "None", "sbar_frame_color": "None", "sbar_relief": "None", "alpha_channel": "None", "hide_window_when_creating": "None", "use_button_shortcuts": "None", "watermark_text": "None)", "<strong>RETURN</strong>": "None"}, "descriptions": {"icon": {"Type": "bytes or str", "Meaning": "Can be either a filename or Base64 value. For Windows if filename, it MUST be ICO format. For Linux, must NOT be ICO. Most portable is to use a Base64 of a PNG file. This works universally across all OSs"}, "button_color": {"Type": "(str, str) or str", "Meaning": "Color of the button (text, background)"}, "element_size": {"Type": "(int, int)", "Meaning": "element size (width, height) in characters"}, "button_element_size": {"Type": "(int, int)", "Meaning": "Size of button"}, "margins": {"Type": "(int, int)", "Meaning": "(left/right, top/bottom) tkinter margins around outsize. Amount of pixels to leave inside the windows frame around the edges before your elements are shown."}, "element_padding": {"Type": "(int, int or (int, int),(int,int))", "Meaning": "Default amount of padding to put around elements in window (left/right, top/bottom) or ((left, right), (top, bottom))"}, "auto_size_text": {"Type": "bool", "Meaning": "True if the Widget should be shrunk to exactly fit the number of chars to show"}, "auto_size_buttons": {"Type": "bool", "Meaning": "True if Buttons in this Window should be sized to exactly fit the text on this."}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "border_width": {"Type": "int", "Meaning": "width of border around element"}, "slider_border_width": {"Type": "int", "Meaning": "Width of the border around sliders"}, "slider_relief": {"Type": "str", "Meaning": "Type of relief to use for sliders"}, "slider_orientation": {"Type": "???", "Meaning": "???"}, "autoclose_time": {"Type": "???", "Meaning": "???"}, "message_box_line_width": {"Type": "???", "Meaning": "???"}, "progress_meter_border_depth": {"Type": "???", "Meaning": "???"}, "progress_meter_style": {"Type": "???", "Meaning": "You can no longer set a progress bar style. All ttk styles must be the same for the window"}, "progress_meter_relief": {"Type": "???", "Meaning": ""}, "progress_meter_color": {"Type": "???", "Meaning": "???"}, "progress_meter_size": {"Type": "???", "Meaning": "???"}, "text_justification": {"Type": "left or right or center", "Meaning": "Default text justification for all Text Elements in window"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "element_background_color": {"Type": "str", "Meaning": "element background color"}, "text_element_background_color": {"Type": "str", "Meaning": "text element background color"}, "input_elements_background_color": {"Type": "str", "Meaning": "Default color to use for the background of input elements"}, "input_text_color": {"Type": "str", "Meaning": "Default color to use for the text for Input elements"}, "scrollbar_color": {"Type": "str", "Meaning": "Default color to use for the slider trough"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "element_text_color": {"Type": "str", "Meaning": "Default color to use for Text elements"}, "debug_win_size": {"Type": "(int, int)", "Meaning": "window size"}, "window_location": {"Type": "(int, int) or None", "Meaning": "Default location to place windows. Not setting will center windows on the display"}, "error_button_color": {"Type": "???", "Meaning": "(Default = (None))"}, "tooltip_time": {"Type": "int", "Meaning": "time in milliseconds to wait before showing a tooltip. Default is 400ms"}, "tooltip_font": {"Type": "str or Tuple[str, int] or Tuple[str, int, str]", "Meaning": "font to use for all tooltips"}, "use_ttk_buttons": {"Type": "bool", "Meaning": "if True will cause all buttons to be ttk buttons"}, "ttk_theme": {"Type": "str", "Meaning": "Theme to use with ttk widgets. Choices (on Windows) include - default, winnative, clam, alt, classic, vista, xpnative"}, "suppress_error_popups": {"Type": "bool", "Meaning": "If True then error popups will not be shown if generated internally to PySimpleGUI"}, "suppress_raise_key_errors": {"Type": "bool", "Meaning": "If True then key errors wont be raised (youll still get popup error)"}, "suppress_key_guessing": {"Type": "bool", "Meaning": "If True then key errors wont try and find closest matches for you"}, "warn_button_key_duplicates": {"Type": "bool", "Meaning": "If True then duplicate Button Keys generate warnings (not recommended as theyre expected)"}, "enable_treeview_869_patch": {"Type": "bool", "Meaning": "If True, then will use the treeview color patch for tk 8.6.9"}, "enable_mac_notitlebar_patch": {"Type": "bool", "Meaning": "If True then Windows with no titlebar use an alternative technique when tkinter version &lt; 8.6.10"}, "use_custom_titlebar": {"Type": "bool", "Meaning": "If True then a custom titlebar is used instead of the normal system titlebar"}, "titlebar_background_color": {"Type": "str or None", "Meaning": "If custom titlebar indicated by use_custom_titlebar, then use this as background color"}, "titlebar_text_color": {"Type": "str or None", "Meaning": "If custom titlebar indicated by use_custom_titlebar, then use this as text color"}, "titlebar_font": {"Type": "(str or (str, int[, str]) or None) or None", "Meaning": "If custom titlebar indicated by use_custom_titlebar, then use this as title font"}, "titlebar_icon": {"Type": "bytes or str", "Meaning": "If custom titlebar indicated by use_custom_titlebar, then use this as the icon (file or base64 bytes)"}, "user_settings_path": {"Type": "str", "Meaning": "default path for user_settings API calls. Expanded with os.path.expanduser so can contain ~ to represent user"}, "pysimplegui_settings_path": {"Type": "str", "Meaning": "default path for the global PySimpleGUI user_settings"}, "pysimplegui_settings_filename": {"Type": "str", "Meaning": "default filename for the global PySimpleGUI user_settings"}, "keep_on_top": {"Type": "bool", "Meaning": "If True then all windows will automatically be set to keep_on_top=True"}, "dpi_awareness": {"Type": "bool", "Meaning": "If True then will turn on DPI awareness (Windows only at the moment)"}, "scaling": {"Type": "float", "Meaning": "Sets the default scaling for all windows including popups, etc."}, "disable_modal_windows": {"Type": "bool", "Meaning": "If True then all windows, including popups, will not be modal windows (unless theyve been set to FORCED using another option)"}, "force_modal_windows": {"Type": "bool", "Meaning": "If True then all windows will be modal (the disable option will be ignored... all windows will be forced to be modal)"}, "tooltip_offset": {"Type": "((None, None) or (int, int))", "Meaning": "Offset to use for tooltips as a tuple. These values will be added to the mouse location when the widget was entered."}, "sbar_trough_color": {"Type": "str", "Meaning": "Scrollbar color of the trough"}, "sbar_background_color": {"Type": "str", "Meaning": "Scrollbar color of the background of the arrow buttons at the ends AND the color of the 'thumb' (the thing you grab and slide). Switches to arrow color when mouse is over"}, "sbar_arrow_color": {"Type": "str", "Meaning": "Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over"}, "sbar_width": {"Type": "int", "Meaning": "Scrollbar width in pixels"}, "sbar_arrow_width": {"Type": "int", "Meaning": "Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar"}, "sbar_frame_color": {"Type": "str", "Meaning": "Scrollbar Color of frame around scrollbar (available only on some ttk themes)"}, "sbar_relief": {"Type": "str", "Meaning": "Scrollbar relief that will be used for the 'thumb' of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with 'RELIEF_' - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID"}, "alpha_channel": {"Type": "float", "Meaning": "Default alpha channel to be used on all windows"}, "hide_window_when_creating": {"Type": "bool", "Meaning": "If True then alpha will be set to 0 while a window is made and moved to location indicated"}, "use_button_shortcuts": {"Type": "bool", "Meaning": "If True then Shortcut Char will be used with Buttons"}, "watermark_text": {"Type": "str", "Meaning": "Set the text that will be used if a window is watermarked"}, "<strong>RETURN</strong>": {"Type": "None", "Meaning": "None"}}}, "Menu Element is the Element that provides a Menu Bar that goes across the top of the window, just below titlebar.": {"name": "Menu Element is the Element that provides a Menu Bar that goes across the top of the window, just below titlebar.", "components": {"menu_definition": "None", "background_color": "None", "text_color": "None", "disabled_text_color": "None", "size": "None", "s": "None", "tearoff": "None", "pad": "None", "p": "None", "font": "None", "key": "None", "k": "None", "visible": "None", "metadata": "None"}, "descriptions": {"menu_definition": {"Type": "List[List[Tuple[str, List[str]]]", "Meaning": "The Menu definition specified using lists (docs explain the format)"}, "background_color": {"Type": "str", "Meaning": "color of the background of menus, NOT the Menubar"}, "text_color": {"Type": "str", "Meaning": "text color for menus, NOT the Menubar. Can be in #RRGGBB format or a color name 'black'."}, "disabled_text_color": {"Type": "str", "Meaning": "color to use for text when item in submenu, not the menubar itself, is disabled. Can be in #RRGGBB format or a color name 'black'"}, "size": {"Type": "(int, int)", "Meaning": "Not used in the tkinter port"}, "s": {"Type": "(int, int)  or (None, None)", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "tearoff": {"Type": "bool", "Meaning": "if True, then can tear the menu off from the window ans use as a floating window. Very cool effect"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. of submenus. Does NOT apply to the Menubar itself. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "Spin": {"name": "Spin", "components": {"values": "None", "initial_value": "None", "disabled": "False", "change_submits": "False", "enable_events": "False", "readonly": "False", "size": "(None, None)", "s": "(None, None)", "auto_size_text": "None", "bind_return_key": "None", "font": "None", "background_color": "None", "text_color": "None", "key": "None", "k": "None", "pad": "None", "p": "None", "wrap": "None", "tooltip": "None", "right_click_menu": "None", "expand_x": "False", "expand_y": "False", "visible": "True", "metadata": "None)"}, "descriptions": {"values": {"Type": "Tuple[Any] or List[Any]", "Meaning": "List of valid values"}, "initial_value": {"Type": "Any", "Meaning": "Initial item to show in window. Choose from list of values supplied"}, "disabled": {"Type": "bool", "Meaning": "set disable state"}, "change_submits": {"Type": "bool", "Meaning": "DO NOT USE. Only listed for backwards compat - Use enable_events instead"}, "enable_events": {"Type": "bool", "Meaning": "Turns on the element specific events. Spin events happen when an item changes"}, "readonly": {"Type": "bool", "Meaning": "If True, then users cannot type in values. Only values from the values list are allowed."}, "size": {"Type": "(int, int)  or (None, None) or int", "Meaning": "(w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1"}, "s": {"Type": "(int, int)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "auto_size_text": {"Type": "bool", "Meaning": "if True will size the element to match the length of the text"}, "bind_return_key": {"Type": "bool", "Meaning": "If True, then the return key will cause a the element to generate an event when return key is pressed"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "wrap": {"Type": "bool", "Meaning": "Determines if the values should 'Wrap'. Default is False. If True, when reaching last value, will continue back to the first value."}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "Input": {"name": "Input", "components": {"default_text": "\"\"", "size": "(None, None)", "s": "(None, None)", "disabled": "False", "password_char": "\"\"", "justification": "None", "background_color": "None", "text_color": "None", "font": "None", "tooltip": "None", "border_width": "None", "change_submits": "False", "enable_events": "False", "do_not_clear": "True", "key": "None", "k": "None", "focus": "False", "pad": "None", "p": "None", "use_readonly_for_disable": "True", "readonly": "False", "disabled_readonly_background_color": "None", "disabled_readonly_text_color": "None", "selected_text_color": "None", "selected_background_color": "None", "expand_x": "False", "expand_y": "False", "right_click_menu": "None", "visible": "True", "metadata": "None)"}, "descriptions": {"default_text": {"Type": "Any", "Meaning": "Text initially shown in the input box as a default value(Default value = ). Will automatically be converted to string"}, "size": {"Type": "(int, int) or  (int, None) or int", "Meaning": "w=characters-wide, h=rows-high. If an int is supplied rather than a tuple, then a tuple is created width=int supplied and heigh=1"}, "s": {"Type": "(int, int)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "disabled": {"Type": "bool", "Meaning": "set disable state for element (Default = False)"}, "password_char": {"Type": "char", "Meaning": "Password character if this is a password field (Default value = )"}, "justification": {"Type": "str", "Meaning": "justification for data display. Valid choices - left, right, center"}, "background_color": {"Type": "str", "Meaning": "color of background in one of the color formats"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "border_width": {"Type": "int", "Meaning": "width of border around element in pixels"}, "change_submits": {"Type": "bool", "Meaning": "* DEPRICATED DO NOT USE. Use <code>enable_events</code> instead"}, "enable_events": {"Type": "bool", "Meaning": "If True then changes to this element are immediately reported as an event. Use this instead of change_submits (Default = False)"}, "do_not_clear": {"Type": "bool", "Meaning": "If False then the field will be set to blank after ANY event (button, any event) (Default = True)"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "focus": {"Type": "bool", "Meaning": "Determines if initial focus should go to this element."}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element. Normally (horizontal pixels, vertical pixels) but can be split apart further into ((horizontal left, horizontal right), (vertical above, vertical below)). If int is given, then converted to tuple (int, int) with the value provided duplicated"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "use_readonly_for_disable": {"Type": "bool", "Meaning": "If True (the default) tkinter state set to readonly. Otherwise state set to disabled"}, "readonly": {"Type": "bool", "Meaning": "If True tkinter state set to readonly. Use this in place of use_readonly_for_disable as another way of achieving readonly. Note cannot set BOTH readonly and disabled as tkinter only supplies a single flag"}, "disabled_readonly_background_color": {"Type": "str", "Meaning": "If state is set to readonly or disabled, the color to use for the background"}, "disabled_readonly_text_color": {"Type": "str", "Meaning": "If state is set to readonly or disabled, the color to use for the text"}, "selected_text_color": {"Type": "str", "Meaning": "Color of text when it is selected (using mouse or control+A, etc)"}, "selected_background_color": {"Type": "str", "Meaning": "Color of background when it is selected (using mouse or control+A, etc)"}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element (Default = True)"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "StatusBar": {"name": "StatusBar", "components": {"text": "None", "size": "(None, None)", "s": "(None, None)", "auto_size_text": "None", "click_submits": "None", "enable_events": "False", "relief": "\"sunken\"", "font": "None", "text_color": "None", "background_color": "None", "justification": "None", "pad": "None", "p": "None", "key": "None", "k": "None", "right_click_menu": "None", "expand_x": "False", "expand_y": "False", "tooltip": "None", "visible": "True", "metadata": "None)"}, "descriptions": {"text": {"Type": "str", "Meaning": "Text that is to be displayed in the widget"}, "size": {"Type": "(int, int) or  (int, None) or int", "Meaning": "(w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1"}, "s": {"Type": "(int, int)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "auto_size_text": {"Type": "bool", "Meaning": "True if size should fit the text length"}, "click_submits": {"Type": "bool", "Meaning": "DO NOT USE. Only listed for backwards compat - Use enable_events instead"}, "enable_events": {"Type": "bool", "Meaning": "Turns on the element specific events. StatusBar events occur when the bar is clicked"}, "relief": {"Type": "enum", "Meaning": "relief style. Values are same as progress meter relief values. Can be a constant or a string: <code>RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID</code>"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "justification": {"Type": "str", "Meaning": "how string should be aligned within space provided by size. Valid choices = <code>left</code>, <code>right</code>, <code>center</code>"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "execute_editor": {"name": "execute_editor", "components": {"command": "None", "*args": "None", "wait": "None", "cwd": "None", "pipe_output": "None", "merge_stderr_with_stdout": "None", "stdin": "None", "<strong>RETURN</strong>": "None", "file_to_edit": "None", "line_number": "None", "folder_to_open": "None", "subprocess_id": "None", "timeout": "None", "pyfile": "None", "parms": "None", "interpreter_command": "None"}, "descriptions": {"command": {"Type": "str", "Meaning": "Filename to load settings from (and save to in the future)"}, "*args": {"Type": "Any", "Meaning": "Variable number of arguments that are passed to the program being started as command line parms"}, "wait": {"Type": "bool", "Meaning": "the working directory to use"}, "cwd": {"Type": "str", "Meaning": "the working directory to use"}, "pipe_output": {"Type": "bool", "Meaning": "If True then output from the subprocess will be piped. You MUST empty the pipe by calling execute_get_results or your subprocess will block until no longer full"}, "merge_stderr_with_stdout": {"Type": "bool", "Meaning": "If True then output from the subprocess stderr will be merged with stdout. The result is ALL output will be on stdout."}, "stdin": {"Type": "bool", "Meaning": "Value passed to the Popen call. Defaults to subprocess.DEVNULL so that the pyinstaller created executable work correctly"}, "<strong>RETURN</strong>": {"Type": "bool", "Meaning": "True if the subproces is running"}, "file_to_edit": {"Type": "str", "Meaning": "the full path to the file to edit"}, "line_number": {"Type": "int", "Meaning": "optional line number to place the cursor"}, "folder_to_open": {"Type": "str", "Meaning": "The path to open in the explorer program"}, "subprocess_id": {"Type": "(subprocess.Popen)", "Meaning": "ID previously returned from Exec API calls that indicate this value is returned"}, "timeout": {"Type": "(None or float)", "Meaning": "Time in fractions of a second to wait. Returns , if timeout. Default of None means wait forever"}, "pyfile": {"Type": "str", "Meaning": "the file to run"}, "parms": {"Type": "str", "Meaning": "parameters to pass on the command line"}, "interpreter_command": {"Type": "str", "Meaning": "the command used to invoke the Python interpreter"}}}, "theme": {"name": "theme", "components": {"new_theme": "None)", "<strong>RETURN</strong>": "None", "new_theme_name": "None", "new_theme_dict": "None", "color": "None", "columns": "None", "scrollable": "None", "scroll_area_size": "None", "search_string": "None", "location": "None"}, "descriptions": {"new_theme": {"Type": "str", "Meaning": "the new theme name to use"}, "<strong>RETURN</strong>": {"Type": "(bool)", "Meaning": "True if a custom titlebar / custom menubar should be used"}, "new_theme_name": {"Type": "str", "Meaning": "text to display in element"}, "new_theme_dict": {"Type": "dict", "Meaning": "text to display in element"}, "color": {"Type": "str", "Meaning": "new background color to use (optional)"}, "columns": {"Type": "int", "Meaning": "The number of themes to display per row"}, "scrollable": {"Type": "bool", "Meaning": "If True then scrollbars will be added"}, "scroll_area_size": {"Type": "(int, int)", "Meaning": "Size of the scrollable area (The Column Element used to make scrollable)"}, "search_string": {"Type": "str", "Meaning": "If specified then only themes containing this string will be shown"}, "location": {"Type": "(int, int)", "Meaning": "Location on the screen to place the window. Defaults to the center like all windows"}}}, "Checkbox": {"name": "Checkbox", "components": {"text": "None", "default": "False", "size": "(None, None)", "s": "(None, None)", "auto_size_text": "None", "font": "None", "background_color": "None", "text_color": "None", "checkbox_color": "None", "highlight_thickness": "1", "change_submits": "False", "enable_events": "False", "disabled": "False", "key": "None", "k": "None", "pad": "None", "p": "None", "tooltip": "None", "right_click_menu": "None", "expand_x": "False", "expand_y": "False", "visible": "True", "metadata": "None)"}, "descriptions": {"text": {"Type": "str", "Meaning": "Text to display next to checkbox"}, "default": {"Type": "bool", "Meaning": "Set to True if you want this checkbox initially checked"}, "size": {"Type": "(int, int)  or (None, None) or int", "Meaning": "(w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1"}, "s": {"Type": "(int, int)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "auto_size_text": {"Type": "bool", "Meaning": "if True will size the element to match the length of the text"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "checkbox_color": {"Type": "str", "Meaning": "color of background of the box that has the check mark in it. The checkmark is the same color as the text"}, "highlight_thickness": {"Type": "int", "Meaning": "thickness of border around checkbox when gets focus"}, "change_submits": {"Type": "bool", "Meaning": "DO NOT USE. Only listed for backwards compat - Use enable_events instead"}, "enable_events": {"Type": "bool", "Meaning": "Turns on the element specific events. Checkbox events happen when an item changes"}, "disabled": {"Type": "bool", "Meaning": "set disable state"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "HorizontalSeparator": {"name": "HorizontalSeparator", "components": {"color": "None", "pad": "None", "p": "None", "key": "None", "k": "None)"}, "descriptions": {"color": {"Type": "str", "Meaning": "Color of the line. Defaults to themes text color. Can be name or #RRGGBB format"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}}}, "one_line_progress_meter_cancel": {"name": "one_line_progress_meter_cancel", "components": {"title": "None", "current_value": "None", "max_value": "None", "*args": "None", "key": "\"OK for 1 meter\")", "orientation": "None", "bar_color": "None", "button_color": "None", "size": "None", "border_width": "None", "grab_anywhere": "None", "no_titlebar": "None", "keep_on_top": "None", "no_button": "None", "<strong>RETURN</strong>": "None"}, "descriptions": {"title": {"Type": "str", "Meaning": "text to display in titlebar of window"}, "current_value": {"Type": "int", "Meaning": "current value"}, "max_value": {"Type": "int", "Meaning": "max value of progress meter"}, "*args": {"Type": "Any", "Meaning": "stuff to output as text in the window along with the meter"}, "key": {"Type": "Any", "Meaning": "Key used when meter was created"}, "orientation": {"Type": "str", "Meaning": "horizontal or vertical (h or v work) (Default value = vertical / v)"}, "bar_color": {"Type": "(str, str) or str", "Meaning": "The 2 colors that make up a progress bar. Either a tuple of 2 strings or a string. Tuple - (bar, background). A string with 1 color changes the background of the bar only. A string with 2 colors separated by 'on' like 'red on blue' specifies a red bar on a blue background."}, "button_color": {"Type": "(str, str) or str", "Meaning": "button color (foreground, background)"}, "size": {"Type": "(int, int)", "Meaning": "(w,h) w=characters-wide, h=rows-high (Default value = DEFAULT_PROGRESS_BAR_SIZE)"}, "border_width": {"Type": "int", "Meaning": "width of border around element"}, "grab_anywhere": {"Type": "bool", "Meaning": "If True: can grab anywhere to move the window (Default = False)"}, "no_titlebar": {"Type": "bool", "Meaning": "If True: no titlebar will be shown on the window"}, "keep_on_top": {"Type": "bool", "Meaning": "If True the window will remain above all current windows"}, "no_button": {"Type": "bool", "Meaning": "If True: window will be created without a cancel button"}, "<strong>RETURN</strong>": {"Type": "None", "Meaning": "None"}}}, "Sizegrip": {"name": "Sizegrip", "components": {"background_color": "None", "pad": "None", "p": "(0, 0)", "key": "None", "k": "None)"}, "descriptions": {"background_color": {"Type": "str", "Meaning": "color to use for the background of the grip"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}}}, "Table": {"name": "Table", "components": {"values": "None", "headings": "None", "visible_column_map": "None", "col_widths": "None", "cols_justification": "None", "def_col_width": "10", "auto_size_columns": "True", "max_col_width": "20", "select_mode": "None", "display_row_numbers": "False", "starting_row_number": "0", "num_rows": "None", "row_height": "None", "font": "None", "justification": "\"right\"", "text_color": "None", "background_color": "None", "alternating_row_color": "None", "selected_row_colors": "(None, None)", "header_text_color": "None", "header_background_color": "None", "header_font": "None", "header_border_width": "None", "header_relief": "None", "row_colors": "None", "vertical_scroll_only": "True", "hide_vertical_scroll": "False", "border_width": "None", "sbar_trough_color": "None", "sbar_background_color": "None", "sbar_arrow_color": "None", "sbar_width": "None", "sbar_arrow_width": "None", "sbar_frame_color": "None", "sbar_relief": "None", "size": "(None, None)", "change_submits": "False", "enable_events": "False", "enable_click_events": "False", "right_click_selects": "False", "bind_return_key": "False", "pad": "None", "p": "None", "key": "None", "k": "None", "tooltip": "None", "right_click_menu": "None", "expand_x": "False", "expand_y": "False", "visible": "True", "metadata": "None)"}, "descriptions": {"values": {"Type": "List[List[str or int or float]]", "Meaning": "Your table data represented as a 2-dimensions table... a list of rows, with each row representing a row in your table."}, "headings": {"Type": "List[str]", "Meaning": "The headings to show on the top line"}, "visible_column_map": {"Type": "List[bool]", "Meaning": "One entry for each column. False indicates the column is not shown"}, "col_widths": {"Type": "List[int]", "Meaning": "Number of characters that each column will occupy"}, "cols_justification": {"Type": "List[str] or Tuple[str] or None", "Meaning": "Justification for EACH column. Is a list of strings with the value l, r, c that indicates how the column will be justified. Either no columns should be set, or have to have one for every colun"}, "def_col_width": {"Type": "int", "Meaning": "Default column width in characters"}, "auto_size_columns": {"Type": "bool", "Meaning": "if True columns will be sized automatically"}, "max_col_width": {"Type": "int", "Meaning": "Maximum width for all columns in characters"}, "select_mode": {"Type": "enum", "Meaning": "Select Mode. Valid values start with 'TABLE_SELECT_MODE_'. Valid values are: TABLE_SELECT_MODE_NONE TABLE_SELECT_MODE_BROWSE TABLE_SELECT_MODE_EXTENDED"}, "display_row_numbers": {"Type": "bool", "Meaning": "if True, the first column of the table will be the row #"}, "starting_row_number": {"Type": "int", "Meaning": "The row number to use for the first row. All following rows will be based on this starting value. Default is 0."}, "num_rows": {"Type": "int", "Meaning": "The number of rows of the table to display at a time"}, "row_height": {"Type": "int", "Meaning": "height of a single row in pixels"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "justification": {"Type": "str", "Meaning": "left, right, center are valid choices"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "alternating_row_color": {"Type": "str", "Meaning": "if set then every other row will have this color in the background."}, "selected_row_colors": {"Type": "str or (str, str)", "Meaning": "Sets the text color and background color for a selected row. Same format as button colors - tuple (red, yellow) or string red on yellow. Defaults to themes button color"}, "header_text_color": {"Type": "str", "Meaning": "sets the text color for the header"}, "header_background_color": {"Type": "str", "Meaning": "sets the background color for the header"}, "header_font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "header_border_width": {"Type": "(int or None)", "Meaning": "Border width for the header portion"}, "header_relief": {"Type": "(str or None)", "Meaning": "Relief style for the header. Values are same as other elements that use relief. RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID"}, "row_colors": {"Type": "List[Tuple[int, str] or Tuple[Int, str, str]]", "Meaning": "list of tuples of (row, background color) OR (row, foreground color, background color). Sets the colors of listed rows to the color(s) provided (note the optional foreground color)"}, "vertical_scroll_only": {"Type": "bool", "Meaning": "if True only the vertical scrollbar will be visible"}, "hide_vertical_scroll": {"Type": "bool", "Meaning": "if True vertical scrollbar will be hidden"}, "border_width": {"Type": "int", "Meaning": "Border width/depth in pixels"}, "sbar_trough_color": {"Type": "str", "Meaning": "Scrollbar color of the trough"}, "sbar_background_color": {"Type": "str", "Meaning": "Scrollbar color of the background of the arrow buttons at the ends AND the color of the 'thumb' (the thing you grab and slide). Switches to arrow color when mouse is over"}, "sbar_arrow_color": {"Type": "str", "Meaning": "Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over"}, "sbar_width": {"Type": "int", "Meaning": "Scrollbar width in pixels"}, "sbar_arrow_width": {"Type": "int", "Meaning": "Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar"}, "sbar_frame_color": {"Type": "str", "Meaning": "Scrollbar Color of frame around scrollbar (available only on some ttk themes)"}, "sbar_relief": {"Type": "str", "Meaning": "Scrollbar relief that will be used for the 'thumb' of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with 'RELIEF_' - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID"}, "size": {"Type": "(int, int)", "Meaning": "DO NOT USE! Use num_rows instead"}, "change_submits": {"Type": "bool", "Meaning": "DO NOT USE. Only listed for backwards compat - Use enable_events instead"}, "enable_events": {"Type": "bool", "Meaning": "Turns on the element specific events. Table events happen when row is clicked"}, "enable_click_events": {"Type": "bool", "Meaning": "Turns on the element click events that will give you (row, col) click data when the table is clicked"}, "right_click_selects": {"Type": "bool", "Meaning": "If True, then right clicking a row will select that row if multiple rows are not currently selected"}, "bind_return_key": {"Type": "bool", "Meaning": "if True, pressing return key will cause event coming from Table, ALSO a left button double click will generate an event if this parameter is True"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "SystemTray": {"name": "SystemTray", "components": {"menu": "None", "filename": "None", "data": "None", "data_base64": "None", "tooltip": "None", "metadata": "None)"}, "descriptions": {"menu": {"Type": "List[List[List[str] or str]]", "Meaning": "Menu definition. Example - [UNUSED, [My, Simple, ---, Menu, Exit]]"}, "filename": {"Type": "str", "Meaning": "filename for icon"}, "data": {"Type": "bytes", "Meaning": "in-ram image for icon (same as data_base64 parm)"}, "data_base64": {"Type": "bytes", "Meaning": "base-64 data for icon"}, "tooltip": {"Type": "str", "Meaning": "tooltip string"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "Popup": {"name": "Popup", "components": {"*args": "None", "title": "None", "button_color": "None", "background_color": "None", "text_color": "None", "button_type": "0", "auto_close": "False", "auto_close_duration": "None", "custom_text": "(None, None)", "non_blocking": "False", "icon": "None", "line_width": "None", "font": "None", "no_titlebar": "False", "grab_anywhere": "False", "location": "(None, None)", "relative_location": "(None, None)", "keep_on_top": "None", "any_key_closes": "False", "image": "None", "modal": "True", "right_justify_buttons": "None", "button_justification": "None", "drop_whitespace": "True)", "<strong>RETURN</strong>": "None", "image_source": "None", "message": "None", "alpha_channel": "None", "time_between_frames": "None", "transparent_color": "None", "default_path": "None", "default_extension": "None", "save_as": "None", "multiple_files": "None", "file_types": "None", "no_window": "None", "size": "None", "initial_folder": "None", "files_delimiter": "None", "history": "None", "show_hidden": "None", "history_setting_filename": "None", "default_text": "None", "password_char": "None", "yes_no": "None", "no_buttons": "None", "no_sizegrip": "None"}, "descriptions": {"*args": {"Type": "Any", "Meaning": "Variable number of items to display"}, "title": {"Type": "str", "Meaning": "Title to display in the window."}, "button_color": {"Type": "(str, str) or str", "Meaning": "button color (foreground, background)"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "button_type": {"Type": "int", "Meaning": "Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK)."}, "auto_close": {"Type": "bool", "Meaning": "if True window will close itself"}, "auto_close_duration": {"Type": "int or float", "Meaning": "Older versions only accept int. Time in seconds until window will close"}, "custom_text": {"Type": "(str, str) or str", "Meaning": "A string or pair of strings that contain the text to display on the buttons"}, "non_blocking": {"Type": "bool", "Meaning": "if True the call will immediately return rather than waiting on user input"}, "icon": {"Type": "bytes or str", "Meaning": "filename or base64 string to be used for the windows icon"}, "line_width": {"Type": "int", "Meaning": "Width of lines in characters"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "no_titlebar": {"Type": "bool", "Meaning": "If True no titlebar will be shown"}, "grab_anywhere": {"Type": "bool", "Meaning": "If True: can grab anywhere to move the window (Default = False)"}, "location": {"Type": "(int, int)", "Meaning": "Location of upper left corner of the window"}, "relative_location": {"Type": "(int, int)", "Meaning": "(x,y) location relative to the default location of the window, in pixels. Normally the window centers. This location is relative to the location the window would be created. Note they can be negative."}, "keep_on_top": {"Type": "bool", "Meaning": "If True the window will remain above all current windows"}, "any_key_closes": {"Type": "bool", "Meaning": "If True then will turn on return_keyboard_events for the window which will cause window to close as soon as any key is pressed. Normally the return key only will close the window. Default is false."}, "image": {"Type": "str or bytes", "Meaning": "Image to include at the top of the popup window"}, "modal": {"Type": "bool", "Meaning": "If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True"}, "right_justify_buttons": {"Type": "bool", "Meaning": "If True then the buttons will be 'pushed' to the right side of the Window"}, "button_justification": {"Type": "str", "Meaning": "How buttons should be arranged. l, c, r for Left, Center or Right justified"}, "drop_whitespace": {"Type": "bool", "Meaning": "Controls is whitespace should be removed when wrapping text. Parameter is passed to textwrap.fill. Default is to drop whitespace (so popup remains backward compatible)"}, "<strong>RETURN</strong>": {"Type": "'Yes' or 'No' or None", "Meaning": "clicked button"}, "image_source": {"Type": "str or bytes or None", "Meaning": "Either a filename or a base64 string. Use None to close the window."}, "message": {"Type": "str", "Meaning": "message displayed to user"}, "alpha_channel": {"Type": "float", "Meaning": "Window transparency 0 = invisible 1 = completely visible. Values between are see through"}, "time_between_frames": {"Type": "int", "Meaning": "Amount of time in milliseconds between each frame"}, "transparent_color": {"Type": "str", "Meaning": "This color will be completely see-through in your window. Can even click through"}, "default_path": {"Type": "str", "Meaning": "path to display to user as starting point (filled into the input field)"}, "default_extension": {"Type": "str", "Meaning": "If no extension entered by user, add this to filename (only used in saveas dialogs)"}, "save_as": {"Type": "bool", "Meaning": "if True, the 'save as' dialog is shown which will verify before overwriting"}, "multiple_files": {"Type": "bool", "Meaning": "if True, then allows multiple files to be selected that are returned with ; between each filename"}, "file_types": {"Type": "Tuple[Tuple[str,str]]", "Meaning": "List of extensions to show using wildcards. All files (the default) = (('ALL Files', '<em>.</em> *'),)."}, "no_window": {"Type": "bool", "Meaning": "if True, no PySimpleGUI window will be shown. Instead just the tkinter dialog is shown"}, "size": {"Type": "(int, int)", "Meaning": "(w,h) w=characters-wide, h=rows-high"}, "initial_folder": {"Type": "str", "Meaning": "location in filesystem to begin browsing"}, "files_delimiter": {"Type": "str", "Meaning": "String to place between files when multiple files are selected. Normally a ;"}, "history": {"Type": "bool", "Meaning": "If True then enable a 'history' feature that will display previous entries used. Uses settings filename provided or default if none provided"}, "show_hidden": {"Type": "bool", "Meaning": "If True then enables the checkbox in the system dialog to select hidden files to be shown"}, "history_setting_filename": {"Type": "str", "Meaning": "Filename to use for the User Settings. Will store list of previous entries in this settings file"}, "default_text": {"Type": "str", "Meaning": "default value to put into input area"}, "password_char": {"Type": "str", "Meaning": "character to be shown instead of actually typed characters. WARNING - if history=True then cant hide passwords"}, "yes_no": {"Type": "bool", "Meaning": "If True, displays Yes and No buttons instead of Ok"}, "no_buttons": {"Type": "bool", "Meaning": "If True, no buttons will be shown. User will have to close using the 'X'"}, "no_sizegrip": {"Type": "bool", "Meaning": "If True no Sizegrip will be shown when there is no titlebar. Its only shown if there is no titlebar"}}}, "OptionMenu": {"name": "OptionMenu", "components": {"values": "None", "default_value": "None", "size": "(None, None)", "s": "(None, None)", "disabled": "False", "auto_size_text": "None", "expand_x": "False", "expand_y": "False", "background_color": "None", "text_color": "None", "key": "None", "k": "None", "pad": "None", "p": "None", "tooltip": "None", "visible": "True", "metadata": "None)"}, "descriptions": {"values": {"Type": "List[Any] or Tuple[Any]", "Meaning": "Values to be displayed"}, "default_value": {"Type": "Any", "Meaning": "the value to choose by default"}, "size": {"Type": "(int, int) (width, UNUSED)", "Meaning": "(width, height) size in characters (wide), height is ignored and present to be consistent with other elements"}, "s": {"Type": "(int, int)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "disabled": {"Type": "bool", "Meaning": "control enabled / disabled"}, "auto_size_text": {"Type": "bool", "Meaning": "True if size of Element should match the contents of the items"}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "tooltip": {"Type": "str", "Meaning": "text that will appear when mouse hovers over this element"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "popup": {"name": "popup", "components": {"*args": "None", "title": "None", "button_color": "None", "background_color": "None", "text_color": "None", "button_type": "0", "auto_close": "False", "auto_close_duration": "None", "custom_text": "(None, None)", "non_blocking": "False", "icon": "None", "line_width": "None", "font": "None", "no_titlebar": "False", "grab_anywhere": "False", "location": "(None, None)", "relative_location": "(None, None)", "keep_on_top": "None", "any_key_closes": "False", "image": "None", "modal": "True", "right_justify_buttons": "None", "button_justification": "None", "drop_whitespace": "True)", "<strong>RETURN</strong>": "None", "image_source": "None", "message": "None", "alpha_channel": "None", "time_between_frames": "None", "transparent_color": "None", "*messages": "None", "emoji": "None", "start_mon": "None", "start_day": "None", "start_year": "None", "begin_at_sunday_plus": "None", "close_when_chosen": "None", "locale": "None", "month_names": "None", "day_abbreviations": "None", "day_font": "None", "mon_year_font": "None", "arrow_font": "None", "default_path": "None", "default_extension": "None", "save_as": "None", "multiple_files": "None", "file_types": "None", "no_window": "None", "size": "None", "initial_folder": "None", "files_delimiter": "None", "history": "None", "show_hidden": "None", "history_setting_filename": "None", "default_text": "None", "password_char": "None", "window": "None", "element": "None", "menu_def": "None", "display_duration_in_ms": "None", "fade_in_duration": "None", "alpha": "None", "yes_no": "None", "no_buttons": "None", "no_sizegrip": "None"}, "descriptions": {"*args": {"Type": "Any", "Meaning": "Variable number of items to display"}, "title": {"Type": "str", "Meaning": "Title to display in the window."}, "button_color": {"Type": "(str, str) or str", "Meaning": "button color (foreground, background)"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "button_type": {"Type": "int", "Meaning": "Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK)."}, "auto_close": {"Type": "bool", "Meaning": "if True window will close itself"}, "auto_close_duration": {"Type": "int or float", "Meaning": "Older versions only accept int. Time in seconds until window will close"}, "custom_text": {"Type": "(str, str) or str", "Meaning": "A string or pair of strings that contain the text to display on the buttons"}, "non_blocking": {"Type": "bool", "Meaning": "if True the call will immediately return rather than waiting on user input"}, "icon": {"Type": "bytes or str", "Meaning": "filename or base64 string to be used for the windows icon"}, "line_width": {"Type": "int", "Meaning": "Width of lines in characters"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "no_titlebar": {"Type": "bool", "Meaning": "If True no titlebar will be shown"}, "grab_anywhere": {"Type": "bool", "Meaning": "If True: can grab anywhere to move the window (Default = False)"}, "location": {"Type": "(int, int)", "Meaning": "Location of upper left corner of the window"}, "relative_location": {"Type": "(int, int)", "Meaning": "(x,y) location relative to the default location of the window, in pixels. Normally the window centers. This location is relative to the location the window would be created. Note they can be negative."}, "keep_on_top": {"Type": "bool", "Meaning": "If True the window will remain above all current windows"}, "any_key_closes": {"Type": "bool", "Meaning": "If True then will turn on return_keyboard_events for the window which will cause window to close as soon as any key is pressed. Normally the return key only will close the window. Default is false."}, "image": {"Type": "str or bytes", "Meaning": "Image to include at the top of the popup window"}, "modal": {"Type": "bool", "Meaning": "If True then makes the popup will behave like a Modal window... all other windows are non-operational until this one is closed. Default = True"}, "right_justify_buttons": {"Type": "bool", "Meaning": "If True then the buttons will be 'pushed' to the right side of the Window"}, "button_justification": {"Type": "str", "Meaning": "How buttons should be arranged. l, c, r for Left, Center or Right justified"}, "drop_whitespace": {"Type": "bool", "Meaning": "Controls is whitespace should be removed when wrapping text. Parameter is passed to textwrap.fill. Default is to drop whitespace (so popup remains backward compatible)"}, "<strong>RETURN</strong>": {"Type": "'Yes' or 'No' or None", "Meaning": "clicked button"}, "image_source": {"Type": "str or bytes or None", "Meaning": "Either a filename or a base64 string. Use None to close the window."}, "message": {"Type": "str", "Meaning": "Text message that makes up the majority of the window"}, "alpha_channel": {"Type": "float", "Meaning": "Window transparency 0 = invisible 1 = completely visible. Values between are see through"}, "time_between_frames": {"Type": "int", "Meaning": "Amount of time in milliseconds between each frame"}, "transparent_color": {"Type": "str", "Meaning": "This color will be completely see-through in your window. Can even click through"}, "*messages": {"Type": "Any", "Meaning": "A variable number of lines of messages you wish to show your user"}, "emoji": {"Type": "bytes", "Meaning": "An optional BASE64 Encoded image to shows in the error window"}, "start_mon": {"Type": "int", "Meaning": "The starting month"}, "start_day": {"Type": "int or None", "Meaning": "The starting day - optional. Set to None or 0 if no date to be chosen at start"}, "start_year": {"Type": "int", "Meaning": "The starting year"}, "begin_at_sunday_plus": {"Type": "int", "Meaning": "Determines the left-most day in the display. 0=sunday, 1=monday, etc"}, "close_when_chosen": {"Type": "bool", "Meaning": "If True, the window will close and function return when a day is clicked"}, "locale": {"Type": "str", "Meaning": "locale used to get the day names"}, "month_names": {"Type": "List[str]", "Meaning": "optional list of month names to use (should be 12 items)"}, "day_abbreviations": {"Type": "List[str]", "Meaning": "optional list of abbreviations to display as the day of week"}, "day_font": {"Type": "str or tuple", "Meaning": "Font and size to use for the calendar"}, "mon_year_font": {"Type": "str or tuple", "Meaning": "Font and size to use for the month and year at the top"}, "arrow_font": {"Type": "str or tuple", "Meaning": "Font and size to use for the arrow buttons"}, "default_path": {"Type": "str", "Meaning": "path to display to user as starting point (filled into the input field)"}, "default_extension": {"Type": "str", "Meaning": "If no extension entered by user, add this to filename (only used in saveas dialogs)"}, "save_as": {"Type": "bool", "Meaning": "if True, the 'save as' dialog is shown which will verify before overwriting"}, "multiple_files": {"Type": "bool", "Meaning": "if True, then allows multiple files to be selected that are returned with ; between each filename"}, "file_types": {"Type": "Tuple[Tuple[str,str]]", "Meaning": "List of extensions to show using wildcards. All files (the default) = (('ALL Files', '<em>.</em> *'),)."}, "no_window": {"Type": "bool", "Meaning": "if True, no PySimpleGUI window will be shown. Instead just the tkinter dialog is shown"}, "size": {"Type": "(int, int)", "Meaning": "(w,h) w=characters-wide, h=rows-high"}, "initial_folder": {"Type": "str", "Meaning": "location in filesystem to begin browsing"}, "files_delimiter": {"Type": "str", "Meaning": "String to place between files when multiple files are selected. Normally a ;"}, "history": {"Type": "bool", "Meaning": "If True then enable a 'history' feature that will display previous entries used. Uses settings filename provided or default if none provided"}, "show_hidden": {"Type": "bool", "Meaning": "If True then enables the checkbox in the system dialog to select hidden files to be shown"}, "history_setting_filename": {"Type": "str", "Meaning": "Filename to use for the User Settings. Will store list of previous entries in this settings file"}, "default_text": {"Type": "str", "Meaning": "default value to put into input area"}, "password_char": {"Type": "str", "Meaning": "character to be shown instead of actually typed characters. WARNING - if history=True then cant hide passwords"}, "window": {"Type": "Window", "Meaning": "The window associated with the popup menu. The theme and right click menu settings for this window will be used"}, "element": {"Type": "Element", "Meaning": "An element in your window to associate the menu to. It can be any element"}, "menu_def": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A menu definition. This will be the same format as used for Right Click Menus1"}, "display_duration_in_ms": {"Type": "int", "Meaning": "Number of milliseconds to show the window"}, "fade_in_duration": {"Type": "int", "Meaning": "Number of milliseconds to fade window in and out"}, "alpha": {"Type": "float", "Meaning": "Alpha channel. 0 - invisible 1 - fully visible"}, "yes_no": {"Type": "bool", "Meaning": "If True, displays Yes and No buttons instead of Ok"}, "no_buttons": {"Type": "bool", "Meaning": "If True, no buttons will be shown. User will have to close using the 'X'"}, "no_sizegrip": {"Type": "bool", "Meaning": "If True no Sizegrip will be shown when there is no titlebar. Its only shown if there is no titlebar"}}}, "MenubarCustom": {"name": "MenubarCustom", "components": {"menu_definition": "None", "disabled_text_color": "None", "bar_font": "None", "font": "None", "tearoff": "False", "pad": "0", "p": "None", "background_color": "None", "text_color": "None", "bar_background_color": "None", "bar_text_color": "None", "key": "None", "k": "None)"}, "descriptions": {"menu_definition": {"Type": "List[List[Tuple[str, List[str]]]", "Meaning": "The Menu definition specified using lists (docs explain the format)"}, "disabled_text_color": {"Type": "str", "Meaning": "color to use for text when item is disabled. Can be in #RRGGBB format or a color name 'black'"}, "bar_font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size to be used for the chars in the bar itself"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size to be used for the menu items"}, "tearoff": {"Type": "bool", "Meaning": "if True, then can tear the menu off from the window ans use as a floating window. Very cool effect"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int). TIP - 0 will make flush with titlebar"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "background_color": {"Type": "str", "Meaning": "color to use for background of the menus that are displayed after making a section. Can be in #RRGGBB format or a color name 'black'. Defaults to the color of the bar text"}, "text_color": {"Type": "str", "Meaning": "color to use for the text of the many items in the displayed menus. Can be in #RRGGBB format or a color name 'black'. Defaults to the bar background"}, "bar_background_color": {"Type": "str", "Meaning": "color to use for the menubar. Can be in #RRGGBB format or a color name 'black'. Defaults to themes button text color"}, "bar_text_color": {"Type": "str", "Meaning": "color to use for the menu items text when item is disabled. Can be in #RRGGBB format or a color name 'black'. Defaults to themes button background color"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}}}, "RButton": {"name": "RButton", "components": {"button_text": "None", "image_filename": "None", "image_data": "None", "image_size": "(None, None)", "image_subsample": "None", "tooltip": "None", "size": "(None, None)", "s": "(None, None)", "auto_size_button": "None", "button_color": "None", "font": "None", "bind_return_key": "False", "disabled": "False", "focus": "False", "pad": "None", "p": "None", "key": "None", "k": "None", "border_width": "None", "metadata": "None", "expand_x": "False", "expand_y": "False)", "<strong>RETURN</strong>": "None"}, "descriptions": {"button_text": {"Type": "str", "Meaning": "text in the button"}, "image_filename": {"Type": "image filename if there is a button image", "Meaning": "image filename if there is a button image"}, "image_data": {"Type": "in-RAM image to be displayed on button", "Meaning": "in-RAM image to be displayed on button"}, "image_size": {"Type": "(Default = (None))", "Meaning": "image size (O.K.)"}, "image_subsample": {"Type": "amount to reduce the size of the image", "Meaning": "amount to reduce the size of the image"}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "size": {"Type": "(int, int)", "Meaning": "(w,h) w=characters-wide, h=rows-high"}, "s": {"Type": "(int, int)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "auto_size_button": {"Type": "bool", "Meaning": "True if button size is determined by button text"}, "button_color": {"Type": "(str, str) or str", "Meaning": "button color (foreground, background)"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "bind_return_key": {"Type": "bool", "Meaning": "(Default = False) If True, this button will appear to be clicked when return key is pressed in other elements such as Input and elements with return key options"}, "disabled": {"Type": "bool", "Meaning": "set disable state for element (Default = False)"}, "focus": {"Type": "idk_yetReally", "Meaning": "if focus should be set to this"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "key": {"Type": "str or int or tuple or object", "Meaning": "key for uniquely identify this element (for window.find_element)"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "border_width": {"Type": "int", "Meaning": "width of border around element"}, "metadata": {"Type": "Any", "Meaning": "Anything you want to store along with this button"}, "expand_x": {"Type": "bool", "Meaning": "If True Element will expand in the Horizontal directions"}, "expand_y": {"Type": "bool", "Meaning": "If True Element will expand in the Vertical directions"}, "<strong>RETURN</strong>": {"Type": "(Button)", "Meaning": "returns a button"}}}, "Tree": {"name": "Tree", "components": {"data": "None", "headings": "None", "visible_column_map": "None", "col_widths": "None", "col0_width": "10", "col0_heading": "\"\"", "def_col_width": "10", "auto_size_columns": "True", "max_col_width": "20", "select_mode": "None", "show_expanded": "False", "change_submits": "False", "enable_events": "False", "click_toggles_select": "None", "font": "None", "justification": "\"right\"", "text_color": "None", "border_width": "None", "background_color": "None", "selected_row_colors": "(None, None)", "header_text_color": "None", "header_background_color": "None", "header_font": "None", "header_border_width": "None", "header_relief": "None", "num_rows": "None", "row_height": "None", "vertical_scroll_only": "True", "hide_vertical_scroll": "False", "sbar_trough_color": "None", "sbar_background_color": "None", "sbar_arrow_color": "None", "sbar_width": "None", "sbar_arrow_width": "None", "sbar_frame_color": "None", "sbar_relief": "None", "pad": "None", "p": "None", "key": "None", "k": "None", "tooltip": "None", "right_click_menu": "None", "expand_x": "False", "expand_y": "False", "visible": "True", "metadata": "None)"}, "descriptions": {"data": {"Type": "TreeData", "Meaning": "The data represented using a PySimpleGUI provided TreeData class"}, "headings": {"Type": "List[str]", "Meaning": "List of individual headings for each column"}, "visible_column_map": {"Type": "List[bool]", "Meaning": "Determines if a column should be visible. If left empty, all columns will be shown"}, "col_widths": {"Type": "List[int]", "Meaning": "List of column widths so that individual column widths can be controlled"}, "col0_width": {"Type": "int", "Meaning": "Size of Column 0 which is where the row numbers will be optionally shown"}, "col0_heading": {"Type": "str", "Meaning": "Text to be shown in the header for the left-most column"}, "def_col_width": {"Type": "int", "Meaning": "default column width"}, "auto_size_columns": {"Type": "bool", "Meaning": "if True, the size of a column is determined using the contents of the column"}, "max_col_width": {"Type": "int", "Meaning": "the maximum size a column can be"}, "select_mode": {"Type": "enum", "Meaning": "Use same values as found on Table Element. Valid values include: TABLE_SELECT_MODE_NONE TABLE_SELECT_MODE_BROWSE TABLE_SELECT_MODE_EXTENDED"}, "show_expanded": {"Type": "bool", "Meaning": "if True then the tree will be initially shown with all nodes completely expanded"}, "change_submits": {"Type": "bool", "Meaning": "DO NOT USE. Only listed for backwards compat - Use enable_events instead"}, "enable_events": {"Type": "bool", "Meaning": "Turns on the element specific events. Tree events happen when row is clicked"}, "click_toggles_select": {"Type": "bool", "Meaning": "If True then clicking a row will cause the selection for that row to toggle between selected and deselected"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "justification": {"Type": "str", "Meaning": "left, right, center are valid choices"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "border_width": {"Type": "int", "Meaning": "Border width/depth in pixels"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "selected_row_colors": {"Type": "str or (str, str)", "Meaning": "Sets the text color and background color for a selected row. Same format as button colors - tuple (red, yellow) or string red on yellow. Defaults to themes button color"}, "header_text_color": {"Type": "str", "Meaning": "sets the text color for the header"}, "header_background_color": {"Type": "str", "Meaning": "sets the background color for the header"}, "header_font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "header_border_width": {"Type": "(int or None)", "Meaning": "Border width for the header portion"}, "header_relief": {"Type": "(str or None)", "Meaning": "Relief style for the header. Values are same as other elements that use relief. RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID"}, "num_rows": {"Type": "int", "Meaning": "The number of rows of the table to display at a time"}, "row_height": {"Type": "int", "Meaning": "height of a single row in pixels"}, "vertical_scroll_only": {"Type": "bool", "Meaning": "if True only the vertical scrollbar will be visible"}, "hide_vertical_scroll": {"Type": "bool", "Meaning": "if True vertical scrollbar will be hidden"}, "sbar_trough_color": {"Type": "str", "Meaning": "Scrollbar color of the trough"}, "sbar_background_color": {"Type": "str", "Meaning": "Scrollbar color of the background of the arrow buttons at the ends AND the color of the 'thumb' (the thing you grab and slide). Switches to arrow color when mouse is over"}, "sbar_arrow_color": {"Type": "str", "Meaning": "Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over"}, "sbar_width": {"Type": "int", "Meaning": "Scrollbar width in pixels"}, "sbar_arrow_width": {"Type": "int", "Meaning": "Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar"}, "sbar_frame_color": {"Type": "str", "Meaning": "Scrollbar Color of frame around scrollbar (available only on some ttk themes)"}, "sbar_relief": {"Type": "str", "Meaning": "Scrollbar relief that will be used for the 'thumb' of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with 'RELIEF_' - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "right_click_menu": {"Type": "List[List[str] or str]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "Frame": {"name": "Frame", "components": {"title": "None", "layout": "None", "title_color": "None", "background_color": "None", "title_location": "None", "relief": "\"groove\"", "size": "(None, None)", "s": "(None, None)", "font": "None", "pad": "None", "p": "None", "border_width": "None", "key": "None", "k": "None", "tooltip": "None", "right_click_menu": "None", "expand_x": "False", "expand_y": "False", "grab": "None", "visible": "True", "element_justification": "\"left\"", "vertical_alignment": "None", "metadata": "None)"}, "descriptions": {"title": {"Type": "str", "Meaning": "text that is displayed as the Frames 'label' or title"}, "layout": {"Type": "List[List[Elements]]", "Meaning": "The layout to put inside the Frame"}, "title_color": {"Type": "str", "Meaning": "color of the title text"}, "background_color": {"Type": "str", "Meaning": "background color of the Frame"}, "title_location": {"Type": "enum", "Meaning": "location to place the text title. Choices include: TITLE_LOCATION_TOP TITLE_LOCATION_BOTTOM TITLE_LOCATION_LEFT TITLE_LOCATION_RIGHT TITLE_LOCATION_TOP_LEFT TITLE_LOCATION_TOP_RIGHT TITLE_LOCATION_BOTTOM_LEFT TITLE_LOCATION_BOTTOM_RIGHT"}, "relief": {"Type": "enum", "Meaning": "relief style. Values are same as other elements with reliefs. Choices include RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID"}, "size": {"Type": "(int, int)", "Meaning": "(width, height) Sets an initial hard-coded size for the Frame. This used to be a problem, but was fixed in 4.53.0 and works better than Columns when using the size paramter"}, "s": {"Type": "(int, int)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. for the TITLE. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "border_width": {"Type": "int", "Meaning": "width of border around element in pixels"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "grab": {"Type": "bool", "Meaning": "If True can grab this element and move the window around. Default is False"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "element_justification": {"Type": "str", "Meaning": "All elements inside the Frame will have this justification left, right, center are valid values"}, "vertical_alignment": {"Type": "str", "Meaning": "Place the Frame at the top, center, bottom of the row (can also use t,c,r). Defaults to no setting (tkinter decides)"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "get_versions": {"name": "get_versions", "components": {}, "descriptions": {}}, "Multiline": {"name": "Multiline", "components": {"default_text": "\"\"", "enter_submits": "False", "disabled": "False", "autoscroll": "False", "autoscroll_only_at_bottom": "False", "border_width": "None", "size": "(None, None)", "s": "(None, None)", "auto_size_text": "None", "background_color": "None", "text_color": "None", "selected_text_color": "None", "selected_background_color": "None", "horizontal_scroll": "False", "change_submits": "False", "enable_events": "False", "do_not_clear": "True", "key": "None", "k": "None", "write_only": "False", "auto_refresh": "False", "reroute_stdout": "False", "reroute_stderr": "False", "reroute_cprint": "False", "echo_stdout_stderr": "False", "focus": "False", "font": "None", "pad": "None", "p": "None", "tooltip": "None", "justification": "None", "no_scrollbar": "False", "wrap_lines": "None", "sbar_trough_color": "None", "sbar_background_color": "None", "sbar_arrow_color": "None", "sbar_width": "None", "sbar_arrow_width": "None", "sbar_frame_color": "None", "sbar_relief": "None", "expand_x": "False", "expand_y": "False", "rstrip": "True", "right_click_menu": "None", "visible": "True", "metadata": "None)"}, "descriptions": {"default_text": {"Type": "Any", "Meaning": "Initial text to show"}, "enter_submits": {"Type": "bool", "Meaning": "if True, the Window.read call will return is enter key is pressed in this element"}, "disabled": {"Type": "bool", "Meaning": "set disable state"}, "autoscroll": {"Type": "bool", "Meaning": "If True the contents of the element will automatically scroll as more data added to the end"}, "autoscroll_only_at_bottom": {"Type": "bool", "Meaning": "If True the contents of the element will automatically scroll only if the scrollbar is at the bottom of the multiline"}, "border_width": {"Type": "int", "Meaning": "width of border around element in pixels"}, "size": {"Type": "(int, int)  or (None, None) or int", "Meaning": "(w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1"}, "s": {"Type": "(int, int)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "auto_size_text": {"Type": "bool", "Meaning": "if True will size the element to match the length of the text"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "selected_text_color": {"Type": "str", "Meaning": "Color of text when it is selected (using mouse or control+A, etc)"}, "selected_background_color": {"Type": "str", "Meaning": "Color of background when it is selected (using mouse or control+A, etc)"}, "horizontal_scroll": {"Type": "bool", "Meaning": "Controls if a horizontal scrollbar should be shown. If True a horizontal scrollbar will be shown in addition to vertical"}, "change_submits": {"Type": "bool", "Meaning": "DO NOT USE. Only listed for backwards compat - Use enable_events instead"}, "enable_events": {"Type": "bool", "Meaning": "If True then any key press that happens when the element has focus will generate an event."}, "do_not_clear": {"Type": "bool", "Meaning": "if False the element will be cleared any time the Window.read call returns"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "write_only": {"Type": "bool", "Meaning": "If True then no entry will be added to the values dictionary when the window is read"}, "auto_refresh": {"Type": "bool", "Meaning": "If True then anytime the element is updated, the window will be refreshed so that the change is immediately displayed"}, "reroute_stdout": {"Type": "bool", "Meaning": "If True then all output to stdout will be output to this element"}, "reroute_stderr": {"Type": "bool", "Meaning": "If True then all output to stderr will be output to this element"}, "reroute_cprint": {"Type": "bool", "Meaning": "If True your cprint calls will output to this element. Its the same as you calling cprint_set_output_destination"}, "echo_stdout_stderr": {"Type": "bool", "Meaning": "If True then output to stdout and stderr will be output to this element AND also to the normal console location"}, "focus": {"Type": "bool", "Meaning": "if True initial focus will go to this element"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "justification": {"Type": "str", "Meaning": "text justification. left, right, center. Can use single characters l, r, c."}, "no_scrollbar": {"Type": "bool", "Meaning": "If False then a vertical scrollbar will be shown (the default)"}, "wrap_lines": {"Type": "bool", "Meaning": "If True, the lines will be wrapped automatically. Other parms affect this setting, but this one will override them all. Default is it does nothing and uses previous settings for wrapping."}, "sbar_trough_color": {"Type": "str", "Meaning": "Scrollbar color of the trough"}, "sbar_background_color": {"Type": "str", "Meaning": "Scrollbar color of the background of the arrow buttons at the ends AND the color of the 'thumb' (the thing you grab and slide). Switches to arrow color when mouse is over"}, "sbar_arrow_color": {"Type": "str", "Meaning": "Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over"}, "sbar_width": {"Type": "int", "Meaning": "Scrollbar width in pixels"}, "sbar_arrow_width": {"Type": "int", "Meaning": "Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar"}, "sbar_frame_color": {"Type": "str", "Meaning": "Scrollbar Color of frame around scrollbar (available only on some ttk themes)"}, "sbar_relief": {"Type": "str", "Meaning": "Scrollbar relief that will be used for the 'thumb' of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with 'RELIEF_' - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID"}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "rstrip": {"Type": "bool", "Meaning": "If True the value returned in will have whitespace stripped from the right side"}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "Image": {"name": "Image", "components": {"source": "None", "filename": "None", "data": "None", "background_color": "None", "size": "(None, None)", "s": "(None, None)", "pad": "None", "p": "None", "key": "None", "k": "None", "tooltip": "None", "subsample": "None", "zoom": "None", "right_click_menu": "None", "expand_x": "False", "expand_y": "False", "visible": "True", "enable_events": "False", "metadata": "None)"}, "descriptions": {"source": {"Type": "str or bytes or None", "Meaning": "A filename or a base64 bytes. Will automatically detect the type and fill in filename or data for you."}, "filename": {"Type": "str or None", "Meaning": "image filename if there is a button image. GIFs and PNGs only."}, "data": {"Type": "bytes or str or None", "Meaning": "Raw or Base64 representation of the image to put on button. Choose either filename or data"}, "background_color": {"Type": "", "Meaning": "color of background"}, "size": {"Type": "(int, int)", "Meaning": "(width, height) size of image in pixels"}, "s": {"Type": "(int, int)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "subsample": {"Type": "int", "Meaning": "amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc"}, "zoom": {"Type": "int", "Meaning": "amount to increase the size of the image."}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "enable_events": {"Type": "bool", "Meaning": "Turns on the element specific events. For an Image element, the event is 'image clicked'"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "running_windows": {"name": "running_windows", "components": {"<strong>RETURN</strong>": "None"}, "descriptions": {"<strong>RETURN</strong>": {"Type": "(bool)", "Meaning": "True if sys.platform indicates running Windows"}}}, "easy_print": {"name": "easy_print", "components": {"*args": "None", "size": "(None, None)", "end": "None", "sep": "None", "location": "(None, None)", "relative_location": "(None, None)", "font": "None", "no_titlebar": "False", "no_button": "False", "grab_anywhere": "False", "background_color": "None", "text_color": "None", "keep_on_top": "None", "do_not_reroute_stdout": "True", "echo_stdout": "False", "colors": "None", "c": "None", "resizable": "True", "erase_all": "False", "blocking": "None", "wait": "None)"}, "descriptions": {"*args": {"Type": "Any", "Meaning": "stuff to output"}, "size": {"Type": "(int, int)", "Meaning": "(w,h) w=characters-wide, h=rows-high"}, "end": {"Type": "str", "Meaning": "end character"}, "sep": {"Type": "str", "Meaning": "separator character"}, "location": {"Type": "(int, int)", "Meaning": "Location of upper left corner of the window"}, "relative_location": {"Type": "(int, int)", "Meaning": "(x,y) location relative to the default location of the window, in pixels. Normally the window centers. This location is relative to the location the window would be created. Note they can be negative."}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "no_titlebar": {"Type": "bool", "Meaning": "If True no titlebar will be shown"}, "no_button": {"Type": "bool", "Meaning": "dont show button"}, "grab_anywhere": {"Type": "bool", "Meaning": "If True: can grab anywhere to move the window (Default = False)"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "keep_on_top": {"Type": "bool", "Meaning": "If True the window will remain above all current windows"}, "do_not_reroute_stdout": {"Type": "bool", "Meaning": "do not reroute stdout and stderr. If False, both stdout and stderr will reroute to here"}, "echo_stdout": {"Type": "bool", "Meaning": "If True stdout is sent to both the console and the debug window"}, "colors": {"Type": "str or str, str", "Meaning": "Either a tuple or a string that has both the text and background colors"}, "c": {"Type": "str or str, str", "Meaning": "Either a tuple or a string that has both the text and background colors"}, "resizable": {"Type": "bool", "Meaning": "if True, the user can resize the debug window. Default is True"}, "erase_all": {"Type": "bool", "Meaning": "If True when erase the output before printing"}, "blocking": {"Type": "(bool or None)", "Meaning": "if True, makes the window block instead of returning immediately. The 'Quit' button changers to 'More'"}, "wait": {"Type": "(bool or None)", "Meaning": "Same as the 'blocking' parm. Its an alias. if True, makes the window block instead of returning immediately. The 'Quit' button changes to 'Click to Continue...'"}}}, "Window": {"name": "Window", "components": {"title": "None", "layout": "None", "default_element_size": "None", "default_button_element_size": "(None, None)", "auto_size_text": "None", "auto_size_buttons": "None", "relative_location": "(None, None)", "location": "(None, None)", "size": "(None, None)", "element_padding": "None", "margins": "(None, None)", "button_color": "None", "font": "None", "progress_bar_color": "(None, None)", "background_color": "None", "border_depth": "None", "auto_close": "False", "auto_close_duration": "3", "icon": "None", "force_toplevel": "False", "alpha_channel": "None", "return_keyboard_events": "False", "use_default_focus": "True", "text_justification": "None", "no_titlebar": "False", "grab_anywhere": "False", "grab_anywhere_using_control": "True", "keep_on_top": "None", "resizable": "False", "disable_close": "False", "disable_minimize": "False", "right_click_menu": "None", "transparent_color": "None", "debugger_enabled": "True", "right_click_menu_background_color": "None", "right_click_menu_text_color": "None", "right_click_menu_disabled_text_color": "None", "right_click_menu_selected_colors": "(None, None)", "right_click_menu_font": "None", "right_click_menu_tearoff": "False", "finalize": "False", "element_justification": "\"left\"", "ttk_theme": "None", "use_ttk_buttons": "None", "modal": "False", "enable_close_attempted_event": "False", "enable_window_config_events": "False", "titlebar_background_color": "None", "titlebar_text_color": "None", "titlebar_font": "None", "titlebar_icon": "None", "use_custom_titlebar": "None", "scaling": "None", "sbar_trough_color": "None", "sbar_background_color": "None", "sbar_arrow_color": "None", "sbar_width": "None", "sbar_arrow_width": "None", "sbar_frame_color": "None", "sbar_relief": "None", "watermark": "None", "metadata": "None)"}, "descriptions": {"title": {"Type": "str", "Meaning": "The title that will be displayed in the Titlebar and on the Taskbar"}, "layout": {"Type": "List[List[Element]] or Tuple[Tuple[Element]]", "Meaning": "The layout for the window. Can also be specified in the Layout method"}, "default_element_size": {"Type": "(int, int) - (width, height)", "Meaning": "size in characters (wide) and rows (high) for all elements in this window"}, "default_button_element_size": {"Type": "(int, int)", "Meaning": "(width, height) size in characters (wide) and rows (high) for all Button elements in this window"}, "auto_size_text": {"Type": "bool", "Meaning": "True if Elements in Window should be sized to exactly fir the length of text"}, "auto_size_buttons": {"Type": "bool", "Meaning": "True if Buttons in this Window should be sized to exactly fit the text on this."}, "relative_location": {"Type": "(int, int)", "Meaning": "(x,y) location relative to the default location of the window, in pixels. Normally the window centers. This location is relative to the location the window would be created. Note they can be negative."}, "location": {"Type": "(int, int or None, None) or None", "Meaning": "(x,y) location, in pixels, to locate the upper left corner of the window on the screen. Default is to center on screen. None will not set any location meaning the OS will decide"}, "size": {"Type": "(int, int)", "Meaning": "(width, height) size in pixels for this window. Normally the window is autosized to fit contents, not set to an absolute size by the user. Try not to set this value. You risk, the contents being cut off, etc. Let the layout determine the window size instead"}, "element_padding": {"Type": "(int, int or (int, int),(int,int)) or int", "Meaning": "Default amount of padding to put around elements in window (left/right, top/bottom) or ((left, right), (top, bottom)), or an int. If an int, then its converted into a tuple (int, int)"}, "margins": {"Type": "(int, int)", "Meaning": "(left/right, top/bottom) Amount of pixels to leave inside the windows frame around the edges before your elements are shown."}, "button_color": {"Type": "(str, str) or str", "Meaning": "Default button colors for all buttons in the window"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "progress_bar_color": {"Type": "(str, str)", "Meaning": "(bar color, background color) Sets the default colors for all progress bars in the window"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "border_depth": {"Type": "int", "Meaning": "Default border depth (width) for all elements in the window"}, "auto_close": {"Type": "bool", "Meaning": "If True, the window will automatically close itself"}, "auto_close_duration": {"Type": "int", "Meaning": "Number of seconds to wait before closing the window"}, "icon": {"Type": "(str or bytes)", "Meaning": "Can be either a filename or Base64 value. For Windows if filename, it MUST be ICO format. For Linux, must NOT be ICO. Most portable is to use a Base64 of a PNG file. This works universally across all OSs"}, "force_toplevel": {"Type": "bool", "Meaning": "If True will cause this window to skip the normal use of a hidden master window"}, "alpha_channel": {"Type": "float", "Meaning": "Sets the opacity of the window. 0 = invisible 1 = completely visible. Values bewteen 0 &amp; 1 will produce semi-transparent windows in SOME environments (The Raspberry Pi always has this value at 1 and cannot change."}, "return_keyboard_events": {"Type": "bool", "Meaning": "if True key presses on the keyboard will be returned as Events from Read calls"}, "use_default_focus": {"Type": "bool", "Meaning": "If True will use the default focus algorithm to set the focus to the 'Correct' element"}, "text_justification": {"Type": "left or right or center", "Meaning": "Default text justification for all Text Elements in window"}, "no_titlebar": {"Type": "bool", "Meaning": "If true, no titlebar nor frame will be shown on window. This means you cannot minimize the window and it will not show up on the taskbar"}, "grab_anywhere": {"Type": "bool", "Meaning": "If True can use mouse to click and drag to move the window. Almost every location of the window will work except input fields on some systems"}, "grab_anywhere_using_control": {"Type": "bool", "Meaning": "If True can use CONTROL key + left mouse mouse to click and drag to move the window. DEFAULT is TRUE. Unlike normal grab anywhere, it works on all elements."}, "keep_on_top": {"Type": "bool", "Meaning": "If True, window will be created on top of all other windows on screen. It can be bumped down if another window created with this parm"}, "resizable": {"Type": "bool", "Meaning": "If True, allows the user to resize the window. Note the not all Elements will change size or location when resizing."}, "disable_close": {"Type": "bool", "Meaning": "If True, the X button in the top right corner of the window will no work. Use with caution and always give a way out toyour users"}, "disable_minimize": {"Type": "bool", "Meaning": "if True the user wont be able to minimize window. Good for taking over entire screen and staying that way."}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "transparent_color": {"Type": "str", "Meaning": "Any portion of the window that has this color will be completely transparent. You can even click through these spots to the window under this window."}, "debugger_enabled": {"Type": "bool", "Meaning": "If True then the internal debugger will be enabled"}, "right_click_menu_background_color": {"Type": "str", "Meaning": "Background color for right click menus"}, "right_click_menu_text_color": {"Type": "str", "Meaning": "Text color for right click menus"}, "right_click_menu_disabled_text_color": {"Type": "str", "Meaning": "Text color for disabled right click menu items"}, "right_click_menu_selected_colors": {"Type": "(str, str) or str or Tuple", "Meaning": "Text AND background colors for a selected item. Can be a Tuple OR a color string. simplified-button-color-string 'foreground on background'. Can be a single color if want to set only the background. Normally a tuple, but can be a simplified-dual-color-string 'foreground on background'. Can be a single color if want to set only the background."}, "right_click_menu_font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "Font for right click menus"}, "right_click_menu_tearoff": {"Type": "bool", "Meaning": "If True then all right click menus can be torn off"}, "finalize": {"Type": "bool", "Meaning": "If True then the Finalize method will be called. Use this rather than chaining .Finalize for cleaner code"}, "element_justification": {"Type": "str", "Meaning": "All elements in the Window itself will have this justification left, right, center are valid values"}, "ttk_theme": {"Type": "str", "Meaning": "Set the tkinter ttk 'theme' of the window. Default = DEFAULT_TTK_THEME. Sets all ttk widgets to this theme as their default"}, "use_ttk_buttons": {"Type": "bool", "Meaning": "Affects all buttons in window. True = use ttk buttons. False = do not use ttk buttons. None = use ttk buttons only if on a Mac"}, "modal": {"Type": "bool", "Meaning": "If True then this window will be the only window a user can interact with until it is closed"}, "enable_close_attempted_event": {"Type": "bool", "Meaning": "If True then the window will not close when 'X' clicked. Instead an event WINDOW_CLOSE_ATTEMPTED_EVENT if returned from window.read"}, "enable_window_config_events": {"Type": "bool", "Meaning": "If True then window configuration events (resizing or moving the window) will return WINDOW_CONFIG_EVENT from window.read. Note you will get several when Window is created."}, "titlebar_background_color": {"Type": "(str or None)", "Meaning": "If custom titlebar indicated by use_custom_titlebar, then use this as background color"}, "titlebar_text_color": {"Type": "(str or None)", "Meaning": "If custom titlebar indicated by use_custom_titlebar, then use this as text color"}, "titlebar_font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "If custom titlebar indicated by use_custom_titlebar, then use this as title font"}, "titlebar_icon": {"Type": "(bytes or str)", "Meaning": "If custom titlebar indicated by use_custom_titlebar, then use this as the icon (file or base64 bytes)"}, "use_custom_titlebar": {"Type": "bool", "Meaning": "If True, then a custom titlebar will be used instead of the normal titlebar"}, "scaling": {"Type": "float", "Meaning": "Apply scaling to the elements in the window. Can be set on a global basis using set_options"}, "sbar_trough_color": {"Type": "str", "Meaning": "Scrollbar color of the trough"}, "sbar_background_color": {"Type": "str", "Meaning": "Scrollbar color of the background of the arrow buttons at the ends AND the color of the 'thumb' (the thing you grab and slide). Switches to arrow color when mouse is over"}, "sbar_arrow_color": {"Type": "str", "Meaning": "Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over"}, "sbar_width": {"Type": "int", "Meaning": "Scrollbar width in pixels"}, "sbar_arrow_width": {"Type": "int", "Meaning": "Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar"}, "sbar_frame_color": {"Type": "str", "Meaning": "Scrollbar Color of frame around scrollbar (available only on some ttk themes)"}, "sbar_relief": {"Type": "str", "Meaning": "Scrollbar relief that will be used for the 'thumb' of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with 'RELIEF_' - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID"}, "watermark": {"Type": "bool", "Meaning": "If True, then turns on watermarking temporarily for ALL windows created from this point forward. See global settings doc for more info"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "user_settings_delete_entry": {"name": "user_settings_delete_entry", "components": {"<strong>RETURN</strong>": "None", "key": "None", "silent_on_error": "None", "filename": "None", "path": "None", "default": "None", "value": "None", "settings_dict": "None"}, "descriptions": {"<strong>RETURN</strong>": {"Type": "(str)", "Meaning": "The full path and filename used to save the settings"}, "key": {"Type": "Any", "Meaning": "Setting to be saved. Can be any valid dictionary key type"}, "silent_on_error": {"Type": "bool", "Meaning": "If True then all error messages are silenced (not displayed on the console)"}, "filename": {"Type": "str", "Meaning": "The fFilename to save to. Can specify a path or just the filename. If no filename specified, then the callers filename will be used."}, "path": {"Type": "str", "Meaning": "The (optional) path to use to save the file."}, "default": {"Type": "Any", "Meaning": "Value to use should the key not be found in the dictionary"}, "value": {"Type": "Any", "Meaning": "Value to save as the settings value. Can be anything"}, "settings_dict": {"Type": "dict", "Meaning": "The dictionary to be written to the currently defined settings file"}}}, "Sizer": {"name": "Sizer", "components": {"h_pixels": "0, v_pixels = 0)", "v_pixels": "None", "<strong>RETURN</strong>": "None"}, "descriptions": {"h_pixels": {"Type": "int", "Meaning": "number of horizontal pixels"}, "v_pixels": {"Type": "int", "Meaning": "number of vertical pixels"}, "<strong>RETURN</strong>": {"Type": "(Column)", "Meaning": "(Column) A column element that has a pad setting set according to parameters"}}}, "TabGroup": {"name": "TabGroup", "components": {"layout": "None", "tab_location": "None", "title_color": "None", "tab_background_color": "None", "selected_title_color": "None", "selected_background_color": "None", "background_color": "None", "focus_color": "None", "font": "None", "change_submits": "False", "enable_events": "False", "pad": "None", "p": "None", "border_width": "None", "tab_border_width": "None", "theme": "None", "key": "None", "k": "None", "size": "(None, None)", "s": "(None, None)", "tooltip": "None", "right_click_menu": "None", "expand_x": "False", "expand_y": "False", "visible": "True", "metadata": "None)"}, "descriptions": {"layout": {"Type": "List[List[Tab]]", "Meaning": "Layout of Tabs. Different than normal layouts. ALL Tabs should be on first row"}, "tab_location": {"Type": "str", "Meaning": "location that tabs will be displayed. Choices are left, right, top, bottom, lefttop, leftbottom, righttop, rightbottom, bottomleft, bottomright, topleft, topright"}, "title_color": {"Type": "str", "Meaning": "color of text on tabs"}, "tab_background_color": {"Type": "str", "Meaning": "color of all tabs that are not selected"}, "selected_title_color": {"Type": "str", "Meaning": "color of tab text when it is selected"}, "selected_background_color": {"Type": "str", "Meaning": "color of tab when it is selected"}, "background_color": {"Type": "str", "Meaning": "color of background area that tabs are located on"}, "focus_color": {"Type": "str", "Meaning": "color of focus indicator on the tabs"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "change_submits": {"Type": "bool", "Meaning": "* DEPRICATED DO NOT USE. Use <code>enable_events</code> instead"}, "enable_events": {"Type": "bool", "Meaning": "If True then switching tabs will generate an Event"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "border_width": {"Type": "int", "Meaning": "width of border around element in pixels"}, "tab_border_width": {"Type": "int", "Meaning": "width of border around the tabs"}, "theme": {"Type": "enum", "Meaning": "DEPRICATED - You can only specify themes using set options or when window is created. Its not possible to do it on an element basis"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "size": {"Type": "(intorNone, intorNone)", "Meaning": "(width, height) w=pixels-wide, h=pixels-high. Either item in tuple can be None to indicate use the computed value and set only 1 direction"}, "s": {"Type": "(intorNone, intorNone)", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "visible": {"Type": "bool", "Meaning": "DEPRECATED - Should you need to control visiblity for the TabGroup as a whole, place it into a Column element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "obj_to_string": {"name": "obj_to_string", "components": {"obj": "None", "extra": "None", "<strong>RETURN</strong>": "None"}, "descriptions": {"obj": {"Type": "Any", "Meaning": "The object to display"}, "extra": {"Type": "str", "Meaning": "extra stuff (Default value =  )"}, "<strong>RETURN</strong>": {"Type": "(str)", "Meaning": "Formatted output of the objects values"}}}, "Graph": {"name": "Graph", "components": {"canvas_size": "None", "graph_bottom_left": "None", "graph_top_right": "None", "background_color": "None", "pad": "None", "p": "None", "change_submits": "False", "drag_submits": "False", "enable_events": "False", "motion_events": "False", "key": "None", "k": "None", "tooltip": "None", "right_click_menu": "None", "expand_x": "False", "expand_y": "False", "visible": "True", "float_values": "False", "border_width": "0", "metadata": "None)"}, "descriptions": {"canvas_size": {"Type": "(int, int)", "Meaning": "size of the canvas area in pixels"}, "graph_bottom_left": {"Type": "(int, int)", "Meaning": "(x,y) The bottoms left corner of your coordinate system"}, "graph_top_right": {"Type": "(int, int)", "Meaning": "(x,y) The top right corner of your coordinate system"}, "background_color": {"Type": "str", "Meaning": "background color of the drawing area"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "change_submits": {"Type": "bool", "Meaning": "* DEPRICATED DO NOT USE. Use <code>enable_events</code> instead"}, "drag_submits": {"Type": "bool", "Meaning": "if True and Events are enabled for the Graph, will report Events any time the mouse moves while button down. When the mouse button is released, youll get an event = graph key + +UP (if key is a string.. if not a string, itll be made into a tuple)"}, "enable_events": {"Type": "bool", "Meaning": "If True then clicks on the Graph are immediately reported as an event. Use this instead of change_submits"}, "motion_events": {"Type": "bool", "Meaning": "If True then if no button is down and the mouse is moved, an event is generated with key = graph key + +MOVE (if key is a string, it not a string then a tuple is returned)"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element (Default = True)"}, "float_values": {"Type": "bool", "Meaning": "If True x,y coordinates are returned as floats, not ints"}, "border_width": {"Type": "int", "Meaning": "width of border around element in pixels. Not normally used for Graph Elements"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "cprint": {"name": "cprint", "components": {"*args": "None", "text_color": "None", "font": "None", "background_color": "None", "colors": "None", "t": "None", "b": "None", "c": "None", "end": "None", "sep": "\" \"", "key": "None", "window": "None", "justification": "None", "autoscroll": "True", "multiline_key": "None", "<strong>RETURN</strong>": "None"}, "descriptions": {"*args": {"Type": "Any", "Meaning": "stuff to output"}, "text_color": {"Type": "str", "Meaning": "Color of the text"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike for the value being updated"}, "background_color": {"Type": "str", "Meaning": "The background color of the line"}, "colors": {"Type": "str or str, str", "Meaning": "Either a tuple or a string that has both the text and background colors 'text on background' or just the text color"}, "t": {"Type": "str", "Meaning": "Color of the text"}, "b": {"Type": "str", "Meaning": "The background color of the line"}, "c": {"Type": "str or str, str", "Meaning": "Either a tuple or a string. Same as the color parm"}, "end": {"Type": "str", "Meaning": "end character"}, "sep": {"Type": "str", "Meaning": "separator character"}, "key": {"Type": "Any", "Meaning": "key of multiline to output to (if you want to override the one previously set)"}, "window": {"Type": "Window", "Meaning": "The window that the cprint call will route the output to"}, "justification": {"Type": "str", "Meaning": "text justification. left, right, center. Can use single characters l, r, c. Sets only for this value, not entire element"}, "autoscroll": {"Type": "bool", "Meaning": "If True the contents of the element will automatically scroll as more data added to the end"}, "multiline_key": {"Type": "Any", "Meaning": "Key for the Multiline Element where output will be sent"}, "<strong>RETURN</strong>": {"Type": "None", "Meaning": "None"}}}, "FillFormWithValues": {"name": "FillFormWithValues", "components": {"window": "None", "values_dict": "None", "<strong>RETURN</strong>": "None"}, "descriptions": {"window": {"Type": "Window", "Meaning": "The window object to fill"}, "values_dict": {"Type": "(Dict[Any, Any])", "Meaning": "A dictionary with element keys as key and value is values parm for Update call"}, "<strong>RETURN</strong>": {"Type": "None", "Meaning": "None"}}}, "TreeData": {"name": "TreeData", "components": {}, "descriptions": {}}, "Titlebar": {"name": "Titlebar", "components": {"icon": "None", "title": "\"\"", "text_color": "None", "background_color": "None", "font": "None", "key": "None", "k": "None)", "<strong>RETURN</strong>": "None"}, "descriptions": {"icon": {"Type": "str or bytes or None", "Meaning": "Can be either a filename or Base64 byte string of a PNG or GIF. This is used in an Image element to create the titlebar"}, "title": {"Type": "str", "Meaning": "The 'title' to show in the titlebar"}, "text_color": {"Type": "str or None", "Meaning": "Text color for titlebar"}, "background_color": {"Type": "str or None", "Meaning": "Background color for titlebar"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "Font to be used for the text and the symbols"}, "key": {"Type": "str or int or tuple or object or None", "Meaning": "Identifies an Element. Should be UNIQUE to this window."}, "k": {"Type": "str or int or tuple or object or None", "Meaning": "Exactly the same as key. Choose one of them to use"}, "<strong>RETURN</strong>": {"Type": "Column", "Meaning": "A single Column element that has eveything in 1 element"}}}, "Radio": {"name": "Radio", "components": {"text": "None", "group_id": "None", "default": "False", "disabled": "False", "size": "(None, None)", "s": "(None, None)", "auto_size_text": "None", "background_color": "None", "text_color": "None", "circle_color": "None", "font": "None", "key": "None", "k": "None", "pad": "None", "p": "None", "tooltip": "None", "change_submits": "False", "enable_events": "False", "right_click_menu": "None", "expand_x": "False", "expand_y": "False", "visible": "True", "metadata": "None)"}, "descriptions": {"text": {"Type": "str", "Meaning": "Text to display next to button"}, "group_id": {"Type": "Any", "Meaning": "Groups together multiple Radio Buttons. Any type works"}, "default": {"Type": "bool", "Meaning": "Set to True for the one element of the group you want initially selected"}, "disabled": {"Type": "bool", "Meaning": "set disable state"}, "size": {"Type": "(int, int)  or (None, None) or int", "Meaning": "(w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1"}, "s": {"Type": "(int, int)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "auto_size_text": {"Type": "bool", "Meaning": "if True will size the element to match the length of the text"}, "background_color": {"Type": "str", "Meaning": "color of background"}, "text_color": {"Type": "str", "Meaning": "color of the text"}, "circle_color": {"Type": "str", "Meaning": "color of background of the circle that has the dot selection indicator in it"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "change_submits": {"Type": "bool", "Meaning": "DO NOT USE. Only listed for backwards compat - Use enable_events instead"}, "enable_events": {"Type": "bool", "Meaning": "Turns on the element specific events. Radio Button events happen when an item is selected"}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "Button": {"name": "Button", "components": {"button_text": "\"\"", "button_type": "7", "target": "(None, None)", "tooltip": "None", "file_types": "(('ALL Files', '*.* *'),)", "initial_folder": "None", "default_extension": "\"\"", "disabled": "False", "change_submits": "False", "enable_events": "False", "image_source": "None", "image_filename": "None", "image_data": "None", "image_size": "(None, None)", "image_subsample": "None", "image_zoom": "None", "border_width": "None", "size": "(None, None)", "s": "(None, None)", "auto_size_button": "None", "button_color": "None", "disabled_button_color": "None", "highlight_colors": "None", "mouseover_colors": "(None, None)", "use_ttk_buttons": "None", "font": "None", "bind_return_key": "False", "focus": "False", "pad": "None", "p": "None", "key": "None", "k": "None", "right_click_menu": "None", "expand_x": "False", "expand_y": "False", "visible": "True", "metadata": "None)"}, "descriptions": {"button_text": {"Type": "str", "Meaning": "Text to be displayed on the button"}, "button_type": {"Type": "int", "Meaning": "You should NOT be setting this directly. ONLY the shortcut functions set this"}, "target": {"Type": "str or (int, int)", "Meaning": "key or (row,col) target for the button. Note that -1 for column means 1 element to the left of this one. The constant ThisRow is used to indicate the current row. The Button itself is a valid target for some types of button"}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "file_types": {"Type": "Tuple[(str, str), ...]", "Meaning": "the filetypes that will be used to match files. To indicate all files: (('ALL Files', '<em>.</em> *'),)."}, "initial_folder": {"Type": "str", "Meaning": "starting path for folders and files"}, "default_extension": {"Type": "str", "Meaning": "If no extension entered by user, add this to filename (only used in saveas dialogs)"}, "disabled": {"Type": "(bool or str)", "Meaning": "If True button will be created disabled. If BUTTON_DISABLED_MEANS_IGNORE then the button will be ignored rather than disabled using tkinter"}, "change_submits": {"Type": "bool", "Meaning": "DO NOT USE. Only listed for backwards compat - Use enable_events instead"}, "enable_events": {"Type": "bool", "Meaning": "Turns on the element specific events. If this button is a target, should it generate an event when filled in"}, "image_source": {"Type": "(str or bytes)", "Meaning": "Image to place on button. Use INSTEAD of the image_filename and image_data. Unifies these into 1 easier to use parm"}, "image_filename": {"Type": "str", "Meaning": "image filename if there is a button image. GIFs and PNGs only."}, "image_data": {"Type": "bytes or str", "Meaning": "Raw or Base64 representation of the image to put on button. Choose either filename or data"}, "image_size": {"Type": "(int, int)", "Meaning": "Size of the image in pixels (width, height)"}, "image_subsample": {"Type": "int", "Meaning": "amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc"}, "image_zoom": {"Type": "int", "Meaning": "amount to increase the size of the image. 2=twice size, 3=3 times, etc"}, "border_width": {"Type": "int", "Meaning": "width of border around button in pixels"}, "size": {"Type": "(int or None, int or None)  or (None, None) or int", "Meaning": "(w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1"}, "s": {"Type": "(int or None, int or None)  or (None, None) or int", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "auto_size_button": {"Type": "bool", "Meaning": "if True the button size is sized to fit the text"}, "button_color": {"Type": "(str, str) or str", "Meaning": "Color of button. default is from theme or the window. Easy to remember which is which if you say 'ON' between colors. 'red' on 'green'. Normally a tuple, but can be a simplified-button-color-string 'foreground on background'. Can be a single color if want to set only the background."}, "disabled_button_color": {"Type": "(str, str) or str", "Meaning": "colors to use when button is disabled (text, background). Use None for a color if dont want to change. Only ttk buttons support both text and background colors. tk buttons only support changing text color"}, "highlight_colors": {"Type": "(str, str)", "Meaning": "colors to use when button has focus (has focus, does not have focus). None will use colors based on theme. Only used by Linux and only for non-TTK button"}, "mouseover_colors": {"Type": "(str, str) or str", "Meaning": "Important difference between Linux &amp; Windows! Linux - Colors when mouse moved over button. Windows - colors when button is pressed. The default is to switch the text and background colors (an inverse effect)"}, "use_ttk_buttons": {"Type": "bool", "Meaning": "True = use ttk buttons. False = do not use ttk buttons. None (Default) = use ttk buttons only if on a Mac and not with button images"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "bind_return_key": {"Type": "bool", "Meaning": "If True then pressing the return key in an Input or Multiline Element will cause this button to appear to be clicked (generates event with this buttons key"}, "focus": {"Type": "bool", "Meaning": "if True, initial focus will be put on this button"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "ProgressBar": {"name": "ProgressBar", "components": {"max_value": "None", "orientation": "None", "size": "(None, None)", "s": "(None, None)", "size_px": "(None, None)", "auto_size_text": "None", "bar_color": "None", "style": "None", "border_width": "None", "relief": "None", "key": "None", "k": "None", "pad": "None", "p": "None", "right_click_menu": "None", "expand_x": "False", "expand_y": "False", "visible": "True", "metadata": "None)"}, "descriptions": {"max_value": {"Type": "int", "Meaning": "max value of progressbar"}, "orientation": {"Type": "str", "Meaning": "horizontal or vertical"}, "size": {"Type": "(int, int) or  (int, None)", "Meaning": "Size of the bar. If horizontal (chars long, pixels wide), vert (chars high, pixels wide). Vert height measured using horizontal chars units."}, "s": {"Type": "(int, int)  or (None, None)", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "size_px": {"Type": "(int, int) or (None, None)", "Meaning": "Size in pixels (length, width). Will be used in place of size parm if specified"}, "auto_size_text": {"Type": "bool", "Meaning": "Not sure why this is here"}, "bar_color": {"Type": "(str, str) or str", "Meaning": "The 2 colors that make up a progress bar. Either a tuple of 2 strings or a string. Tuple - (bar, background). A string with 1 color changes the background of the bar only. A string with 2 colors separated by 'on' like 'red on blue' specifies a red bar on a blue background."}, "style": {"Type": "str", "Meaning": "Progress bar style defined as one of these default, winnative, clam, alt, classic, vista, xpnative"}, "border_width": {"Type": "int", "Meaning": "The amount of pixels that go around the outside of the bar"}, "relief": {"Type": "str", "Meaning": "relief style. Values are same as progress meter relief values. Can be a constant or a string: <code>RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID</code> (Default value = DEFAULT_PROGRESS_BAR_RELIEF)"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Used with window.find_element and with return values to uniquely identify this element to uniquely identify this element"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "VerticalSeparator": {"name": "VerticalSeparator", "components": {"color": "None", "pad": "None", "p": "None", "key": "None", "k": "None)"}, "descriptions": {"color": {"Type": "str", "Meaning": "Color of the line. Defaults to themes text color. Can be name or #RRGGBB format"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}}}, "Tab": {"name": "Tab", "components": {"title": "None", "layout": "None", "title_color": "None", "background_color": "None", "font": "None", "pad": "None", "p": "None", "disabled": "False", "border_width": "None", "key": "None", "k": "None", "tooltip": "None", "right_click_menu": "None", "expand_x": "False", "expand_y": "False", "visible": "True", "element_justification": "\"left\"", "image_source": "None", "image_subsample": "None", "image_zoom": "None", "metadata": "None)"}, "descriptions": {"title": {"Type": "str", "Meaning": "text to show on the tab"}, "layout": {"Type": "List[List[Element]]", "Meaning": "The element layout that will be shown in the tab"}, "title_color": {"Type": "str", "Meaning": "color of the tab text (note not currently working on tkinter)"}, "background_color": {"Type": "str", "Meaning": "color of background of the entire layout"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "NOT USED in the tkinter port"}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "disabled": {"Type": "bool", "Meaning": "If True button will be created disabled"}, "border_width": {"Type": "int", "Meaning": "NOT USED in tkinter port"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "right_click_menu": {"Type": "List[List[ List[str] or str ]]", "Meaning": "A list of lists of Menu items to show when this element is right clicked. See user docs for exact format."}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "element_justification": {"Type": "str", "Meaning": "All elements inside the Tab will have this justification left, right, center are valid values"}, "image_source": {"Type": "str or bytes or None", "Meaning": "A filename or a base64 bytes of an image to place on the Tab"}, "image_subsample": {"Type": "int", "Meaning": "amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc"}, "image_zoom": {"Type": "int", "Meaning": "amount to increase the size of the image. 2=twice size, 3=3 times, etc"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}, "Slider": {"name": "Slider", "components": {"range": "(None, None)", "default_value": "None", "resolution": "None", "tick_interval": "None", "orientation": "None", "disable_number_display": "False", "border_width": "None", "relief": "None", "change_submits": "False", "enable_events": "False", "disabled": "False", "size": "(None, None)", "s": "(None, None)", "font": "None", "background_color": "None", "text_color": "None", "trough_color": "None", "key": "None", "k": "None", "pad": "None", "p": "None", "expand_x": "False", "expand_y": "False", "tooltip": "None", "visible": "True", "metadata": "None)"}, "descriptions": {"range": {"Type": "(int, int) or Tuple[float, float]", "Meaning": "sliders range (min value, max value)"}, "default_value": {"Type": "int or float", "Meaning": "starting value for the slider"}, "resolution": {"Type": "int or float", "Meaning": "the smallest amount the slider can be moved"}, "tick_interval": {"Type": "int or float", "Meaning": "how often a visible tick should be shown next to slider"}, "orientation": {"Type": "str", "Meaning": "horizontal or vertical (h or v also work)"}, "disable_number_display": {"Type": "bool", "Meaning": "if True no number will be displayed by the Slider Element"}, "border_width": {"Type": "int", "Meaning": "width of border around element in pixels"}, "relief": {"Type": "str or None", "Meaning": "relief style. Use constants - RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID"}, "change_submits": {"Type": "bool", "Meaning": "* DEPRICATED DO NOT USE. Use <code>enable_events</code> instead"}, "enable_events": {"Type": "bool", "Meaning": "If True then moving the slider will generate an Event"}, "disabled": {"Type": "bool", "Meaning": "set disable state for element"}, "size": {"Type": "(int, int)", "Meaning": "(l=length chars/rows, w=width pixels)"}, "s": {"Type": "(int, int)  or (None, None)", "Meaning": "Same as size parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, size will be used"}, "font": {"Type": "(str or (str, int[, str]) or None)", "Meaning": "specifies the font family, size, etc. Tuple or Single string format name size styles. Styles: italic * roman bold normal underline overstrike"}, "background_color": {"Type": "str", "Meaning": "color of sliders background"}, "text_color": {"Type": "str", "Meaning": "color of the sliders text"}, "trough_color": {"Type": "str", "Meaning": "color of the sliders trough"}, "key": {"Type": "str or int or tuple or object", "Meaning": "Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window"}, "k": {"Type": "str or int or tuple or object", "Meaning": "Same as the Key. You can use either k or key. Which ever is set will be used."}, "pad": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then its converted into a tuple (int, int)"}, "p": {"Type": "(int, int or (int, int),(int,int) or int,(int,int)) or  ((int, int),int) or int", "Meaning": "Same as pad parameter. Its an alias. If EITHER of them are set, then the one thats set will be used. If BOTH are set, pad will be used"}, "expand_x": {"Type": "bool", "Meaning": "If True the element will automatically expand in the X direction to fill available space"}, "expand_y": {"Type": "bool", "Meaning": "If True the element will automatically expand in the Y direction to fill available space"}, "tooltip": {"Type": "str", "Meaning": "text, that will appear when mouse hovers over the element"}, "visible": {"Type": "bool", "Meaning": "set visibility state of the element"}, "metadata": {"Type": "Any", "Meaning": "User metadata that can be set to ANYTHING"}}}}